#!/usr/bin/perl -w
#
# Copyright (c) 2000-2008 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;

#
# node_status - Updates the 'status' column in the node_status table.
# Currently run as a cron job, but is probably better as a testbed
# daemon. 
#
#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBLOGS      = "@TBLOGSEMAIL@";

# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin:/usr/site/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $verbose = 0;
my $debug = 0;
$verbose = 1
    if ($debug);

#
# Turn off line buffering on output
#
$| = 1; 

# Load the Testbed support stuff.
use lib "@prefix@/lib";
use libdb;

#
# Only root and admins are allowed to use this script
#
if (($UID != 0) && (!TBAdmin())) {
    die("*** $0:\n".
	"    You do not have permission to run this script!\n");
}

#
# Part 1: Set the node_status.status column for nodes.
# The idea is simple; any nodes that have not reported in (isalive in
# tmcd) within the last XX seconds are moved to the down category.
#

#
# Grab the reporting intervals for the various types of nodes - we convert
# them into seconds, and make the timeout twice as big as the reporting
# interval.
#
my $plab_timeout  = TBGetSiteVar("watchdog/isalive/plab")  * 60 * 2;
my $vnode_timeout = TBGetSiteVar("watchdog/isalive/vnode") * 60 * 2;
my $local_timeout = TBGetSiteVar("watchdog/isalive/local") * 60 * 2;
my $wa_timeout    = TBGetSiteVar("watchdog/isalive/wa")    * 60 * 2;

print "\n=== node_status ".
    "(local=$local_timeout, vnode=$vnode_timeout, ".
    "plab=$plab_timeout, wa=$wa_timeout) ".
    "running at " . `date`
    if ($verbose);

#
# A zero timeout value means no timeout
#
if ($plab_timeout == 0) {
    print " WARNING: no timeout on plab nodes\n"
	if ($verbose);
    $plab_timeout = 999999999;
}
if ($vnode_timeout == 0) {
    print " WARNING: no timeout on local vnodes\n"
	if ($verbose);
    $vnode_timeout = 999999999;
}
if ($local_timeout == 0) {
    print " WARNING: no timeout on local nodes\n"
	if ($verbose);
    $local_timeout = 999999999;
}
if ($wa_timeout == 0) {
    print " WARNING: no timeout on widearea nodes\n"
	if ($verbose);
    $wa_timeout = 999999999;
}

#
# Fun facts:
#	isremotenode   -> widearea, plabvirt, plabphys
#	isvirtnode     -> vnode, plabvirt
#	isplabdslice   -> plabvirt
#	isplabphysnode -> plabphys
# so:
#	local phys node == !isremotenode && !isvirtnode
#	local virt node == !isremotenode && isvirtnode
#	widearea node   == isremotenode && !isplabdslice && !isplabphysnode
#	plab phys node  == isplabphysnode
#	plab virt node  == isplabdslice
#
my $query_result =
    DBQueryFatal("SELECT n.node_id,ns.status,r.pid,nt.isremotenode, ".
		 "       nt.isvirtnode, nt.isplabdslice, ".
                 "       unix_timestamp()-unix_timestamp(ns.status_timestamp) ".
		 "from nodes as n ".
		 "left join node_types as nt on n.type=nt.type ".
		 "left join node_status as ns on ns.node_id=n.node_id ".
		 "left join reserved as r on r.node_id=n.node_id ".
		 "where ".
		 " ns.status != 'down' && " .
		 # Local phys nodes:
		 " ((nt.isremotenode=0 && nt.isvirtnode=0 && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $local_timeout)) || ".
		 # Local virtual node:
		 # must be allocated to an experiment to be considered.
		 "  (nt.isremotenode=0 && nt.isvirtnode=1 && ".
		 "   r.pid is not null && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $vnode_timeout)) || ".
		 # Widearea nodes:
		 "  (nt.isremotenode=1 && nt.isplabdslice=0 && ".
		 "   nt.isplabphysnode=0 && nt.isfednode=0 && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $wa_timeout)) || ".
		 # Plab physical nodes:
		 "  (nt.isplabphysnode=1 && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $plab_timeout)) || ".
		 # Plab virtual nodes:
		 # must be allocated to an experiment to be considered.
		 "  (nt.isplabdslice=1 && ".
		 "   r.pid is not null && ".
		 "   ((unix_timestamp()-unix_timestamp(ns.status_timestamp)) > $plab_timeout)))");
		 

while (my ($node,$status,$pid,$remote,$isvirt,$isplab,$timediff) =
       $query_result->fetchrow_array) {
    my $newstatus = "down";

    if (! $remote) {
	#
	# If its reserved and not reporting isalive, then its a user
	# image not doing what it is supposed to. Mark as possibly
	# down since we do not really know whats up. This includes old
	# images as well, but that would only happen when the node is
	# reserved since free nodes run the default image and report in.
	#
	if (defined($pid)) {
	    $newstatus = "possibly down";
	}
    }

    next
	if ($status eq $newstatus);

    print "  $node: $status to $newstatus after $timediff\n"
	if ($verbose);

    #
    # Repeat the time check to avoid dropping a node that just came up?
    #
    if (!$debug) {
	DBQueryFatal("update node_status set status='$newstatus' ".
		     "where node_id='$node'");
    }
}

#
# Part 2: Push nodes into hwdown that have been down for quite a while.
# For now, we only do this for planetlab physnodes, but we may want to do
# it for others, too.
#
my $timeout = TBGetSiteVar("watchdog/isalive/dead_time") * 60;
$query_result =
    DBQueryFatal("SELECT n.node_id from nodes as n " .
		 "left join node_status as ns on ns.node_id=n.node_id ".
		 "left join reserved as r on r.node_id=n.node_id " .
		 "where n.type='pcplabphys' " .
		 "    and unix_timestamp()-unix_timestamp(ns.status_timestamp) > $timeout " .
		 "    and !(r.pid='" . NODEDEAD_PID . "' and r.eid='" .
		      NODEDEAD_EID . "')");

while (my ($node) = $query_result->fetchrow_array) {
    print " $node: moved to hwdown\n"
	if ($verbose);
    if (!$debug) {
	MarkPhysNodeDown($node);
	TBSetNodeLogEntry($node, "root", TB_DEFAULT_NODELOGTYPE(),
		"'Moved to hwdown by node_status; ".
		"did not report in for more than $timeout seconds.'");
    }
}
