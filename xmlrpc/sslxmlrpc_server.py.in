#!/usr/local/bin/python
#
# Copyright (c) 2005-2010, 2012 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
import sys
import getopt
import os, os.path
import pwd
import traceback
import syslog
import string

import BaseHTTPServer

from SimpleXMLRPCServer import SimpleXMLRPCDispatcher

# Testbed specific stuff
TBPATH = "@prefix@/lib"
if TBPATH not in sys.path:
    sys.path.append(TBPATH)
    pass

from libdb        import *

try:
    from M2Crypto import SSL
    from M2Crypto.SSL import SSLError
except ImportError, e:
    sys.stderr.write("error: The py-m2crypto port is not installed\n")
    sys.exit(1)
    pass

# When debugging, runs in foreground printing to stdout instead of syslog
debug           = 0

# The port to listen on. We should get this from configure.
PORT            = 3069

# The local address. Using INADDY_ANY for now.
ADDR            = "0.0.0.0"

# The server certificate and the server CS.
server_cert     = "@prefix@/etc/server.pem"
ca_cert         = "@prefix@/etc/emulab.pem"

#
# By default, run a wrapper class that includes all off the modules.
# The client can invoke methods of the form experiment.swapexp when
# the server is invoked in this manner.
# 
DEFAULT_MODULE = "EmulabServer"
module         = DEFAULT_MODULE

#
# "Standard" paths for the real and development versions of the software.
#
STD_PATH       = "/usr/testbed"
STD_DEVEL_PATH = "/usr/testbed/devel"

#
# The set of paths that the user is allowed to specify in their request.  The
# path specifies where the 'emulabserver' module will be loaded from.  In
# reality, the path only has an effect on the first request in a persistent
# connection, any subsequent requests will reuse the same module.
#
ALLOWED_PATHS  = [ STD_PATH, "@prefix@" ]

# syslog facility
LOGFACIL	= "@TBLOGFACIL@"

##
# Taken from the SimpleXMLRPCServer module in the python installation and
# modified to support persistent connections.
#
class MyXMLRPCRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    """Simple XML-RPC request handler class.

    Handles all HTTP POST requests and attempts to decode them as
    XML-RPC requests.
    """

    ##
    # Change the default protocol so that persistent connections are the norm.
    #
    protocol_version = "HTTP/1.1"

    ##
    # Handle a POST request from the user.  This method was changed from the
    # standard version to not close the 
    #
    def do_POST(self):
        """Handles the HTTP POST request.

        Attempts to interpret all HTTP POST requests as XML-RPC calls,
        which are forwarded to the server's _dispatch method for handling.
        """

        # Update PYTHONPATH with the user's requested path.
        self.server.set_path(self.path, self.client_address)

        try:
            # get arguments
            data = self.rfile.read(int(self.headers["content-length"]))
            # In previous versions of SimpleXMLRPCServer, _dispatch
            # could be overridden in this class, instead of in
            # SimpleXMLRPCDispatcher. To maintain backwards compatibility,
            # check to see if a subclass implements _dispatch and dispatch
            # using that method if present.
            response = self.server._marshaled_dispatch(
                    data, getattr(self, '_dispatch', None)
                )
        except: # This should only happen if the module is buggy
            # internal error, report as HTTP server error
            self.send_response(500)
            self.end_headers()
            self.wfile.flush()
        else:
            # got a valid XML RPC response
            self.send_response(200)
            self.send_header("Content-type", "text/xml")
            self.send_header("Content-length", str(len(response)))
            self.end_headers()
            self.wfile.write(response)
            self.wfile.flush()
            pass
        return

    def log_request(self, code='-', size='-'):
        """Selectively log an accepted request."""

        if self.server.logRequests:
            BaseHTTPServer.BaseHTTPRequestHandler.log_request(self, code, size)


#
# A simple server based on the forking version SSLServer. We fork cause
# we want to change our uid/gid to that of the person on the other end.
# 
class MyServer(SSL.ForkingSSLServer, SimpleXMLRPCDispatcher):
    def __init__(self, debug):
        self.debug         = debug
	self.logRequests   = 0
        self.emulabserver  = None;
        self.glist         = [];
        self.plist         = {};
        self.flipped       = 0;
        
	ctx = SSL.Context('sslv23')
	ctx.load_cert(server_cert, server_cert)
	ctx.load_verify_info(ca_cert)
        ctx.set_verify(SSL.verify_peer | SSL.verify_fail_if_no_peer_cert, 16)
	ctx.set_allow_unknown_ca(0)
	#ctx.set_info_callback()
        
        dargs = (self,)
        if sys.version_info[0] >= 2 and sys.version_info[1] >= 5:
            dargs = (self,False,None)
            pass
        SimpleXMLRPCDispatcher.__init__(*dargs)
        SSL.SSLServer.__init__(self, (ADDR, PORT),
                               MyXMLRPCRequestHandler, ctx)
	pass

    ##
    # Log a message to stdout, if in debug mode, otherwise write to syslog.
    #
    # @param msg The message to log.
    #
    def logit(self, msg):
        if debug:
            print msg
            pass
        else:
            syslog.syslog(syslog.LOG_INFO, msg);
            pass
        return

    ##
    # Updates PYTHONPATH and imports the 'emulabserver' module on its first
    # invocation.  The specified path must be in the ALLOWED_PATHS list and
    # readable by the user, otherwise the request will fail.
    #
    # @param path The path from the POST request, should not include "lib" on
    # the end (e.g. "/usr/testbed")
    #
    def set_path(self, path, client_address):
        if not self.emulabserver:
            if path not in ALLOWED_PATHS:
                self.logit("Disallowed path: %s" % path)
                raise Exception("Path not allowed: %s" % path)
            path = os.path.join(path, "lib")
            if not os.access(path, os.X_OK):
                self.logit("Path not accessible by user: %s" % path)
                raise Exception("Permission denied: %s" % path)

            if path not in sys.path:
                sys.path.append(path)
                pass
            from emulabserver import EmulabServer

            self.emulabserver = EmulabServer(self.uid, self.uid_idx,
                                             readonly=0,
                                             clientip=client_address[0],
                                             debug=self.debug)
            self.logit("imported EmulabServer")
            pass
        return
    
    #
    # There might be a better arrangement, but the problem is that we
    # do not want to create the server instance until we get a chance
    # to look at the certificate and determine the priv level. See
    # below in process_request(). 
    #
    def _dispatch(self, method, params):
        self.fliptouser(params)
        
        try:
            meth = getattr(self.emulabserver, method);
        except AttributeError:
            raise Exception('method "%s" is not supported' % method)
        else:
            self.logit("Calling method '" + method + "'");
            return apply(meth, params);
        pass

    #
    # Get the unix_uid for the user. User must be active. 
    #
    def getuserid(self, uuid):
        userQuery = DBQueryFatal("select uid,uid_idx,unix_uid,status "
                                 "  from users "
                                 "where (uid_uuid=%s or uid=%s) and "
                                 "       status='active'",
                                 (uuid, uuid))
        
        if len(userQuery) == 0:
            return (None, None, 0);
        
        if (userQuery[0][3] != "active"):
            return (None, None, -1);
        
        return (userQuery[0][0], int(userQuery[0][1]), int(userQuery[0][2]))

    #
    # Check if the user is an stud.
    #
    def isstuduser(self, uid_idx):
        res = DBQueryFatal("select stud from users where uid_idx=%s",
                           (str(uid_idx),))

        if len(res) == 0:
            return 0

        return res[0][0]
    
    #
    # Check the certificate serial number. 
    #
    def checkcert(self, uid_idx, serial):
        res = DBQueryFatal("select idx from user_sslcerts "
                           "where uid_idx=%s and idx=%s and revoked is null ",
                           (str(uid_idx), serial))

        return len(res)
    
    #
    # Get the group list for the user.
    #
    def getusergroups(self, uid_idx):
        res = DBQueryFatal("select distinct g.pid,g.unix_gid "
                           "  from group_membership as m "
                           "left join groups as g on "
                           "  g.pid_idx=m.pid_idx and g.gid_idx=m.gid_idx "
                           "where m.uid_idx=%s "
                           "order by date_approved asc ",
                           (str(uid_idx),))
        
        for group in res:
            self.glist.append(int(group[1]))
            # List of all projects, with a list of gids per project.
            if not self.plist.has_key(group[0]):
                self.plist[group[0]] = []
                pass
            self.plist[group[0]].append(int(group[1]))
            pass
        pass

    def setupuser(self, request, client):
        subject = request.get_peer_cert().get_subject()
        if self.debug:
            self.logit(str(subject))
            pass

        #
        # The CN might look like UUID,serial so split it up.
        #
        cnwords = getattr(subject, "CN").split(",")
        self.uuid = cnwords[0]
        
        #
        # Must be a valid and non-zero unix_uid from the DB.
        #
        (self.uid,self.uid_idx,self.unix_uid) = self.getuserid(self.uuid)
        
        if self.unix_uid == 0:
            self.logit('No such user: "%s"' % self.uuid)
            raise Exception('No such user: "%s"' % self.uuid)
        
        if self.unix_uid == -1:
            self.logit('User "%s,%d" is not active' % (self.uid,self.uid_idx))
            raise Exception('User "%s,%d" is not active' %
                            (self.uid,self.uid_idx))

        self.stud = self.isstuduser(self.uid_idx)
        if self.stud:
            try:
                ALLOWED_PATHS.extend(map(lambda x:
                                         os.path.join(STD_DEVEL_PATH, x),
                                         os.listdir(STD_DEVEL_PATH)))
                pass
            except OSError:
                pass
            pass
        
        self.getusergroups(self.uid_idx);
        if len(self.glist) == 0:
            self.logit('No groups for user: "%s,%d"' % (self.uid,self.uid_idx))
            raise Exception('No groups for user: "%s,%d"' %
                            (self.uid,self.uid_idx))

        self.logit("Connect from %s: %s,%d" %
                   (client[0], self.uid, self.uid_idx))
        
        #
        # Check the certificate serial number. At the moment, the serial
        # must match a certificate that is in the DB for that user. This
        # is my crude method of certificate revocation. 
        #
        serial = request.get_peer_cert().get_serial_number()
        
        if self.checkcert(self.uid_idx, serial) == 0:
            self.logit('No such cert with serial "%s"' % serial)
            raise Exception('No such cert with serial "%s"' % serial)

        pass

    #
    # Flip to the user that is in the certificate.
    #
    def fliptouser(self, params):
        if self.flipped:
            return;

        self.flipped = 1;
        
        #
        # BSD 16 group limit stupidity. This is barely a solution.
        #
        if len(self.glist) > 15:
            argdict = params[1]
            project = None

            if argdict.has_key("pid"):
                project = argdict["pid"]
            elif argdict.has_key("proj"):
                project = argdict["proj"]
            else:
                self.logit('Too many groups and no project given as an arg')
                pass
            
            if project:
                if self.plist.has_key(project):
                    self.glist = self.plist[project]
                    self.logit("Setting groups from project %s" % project)
                else:
                    self.logit('Too many groups but not a member of "%s"' %
                               project)
                    pass
                pass
            pass
        self.logit("Setting groups: %s" % str(self.glist))
        try:
            os.setgid(self.glist[0])
            os.setgroups(self.glist)
            os.setuid(self.unix_uid)
            pwddb = pwd.getpwuid(self.unix_uid);

            os.environ["HOME"]    = pwddb[5];
            os.environ["USER"]    = self.uid;
            os.environ["LOGNAME"] = self.uid;
            pass
        except:
            self.logit(traceback.format_exc())
            os._exit(1)
            pass
        pass

    #
    # XXX - The builtin process_request() method for ForkingMixIn is
    # broken; it closes the "request" in the parent which shuts down
    # the ssl connection. So, I have moved the close_request into the
    # child where it should be, and in the parent I close the socket
    # by reaching into the Connection() class.
    # 
    # In any event, I need to do some other stuff in the child before we
    # actually handle the request. 
    # 
    def process_request(self, request, client_address):
        """Fork a new subprocess to process the request."""
        self.collect_children()
        pid = os.fork()
        if pid:
            # Parent process
            if self.active_children is None:
                self.active_children = []
            self.active_children.append(pid)
            request.socket.close()
            return
        else:
            # Child process.
            # This must never return, hence os._exit()!
            try:
                self.setupuser(request, client_address);

                # Remove the old path since the user can request a different
                # one.
                sys.path.remove(TBPATH)
                self.finish_request(request, client_address)
                self.close_request(request)
                self.logit("request finished");
                os._exit(0)
            except:
                try:
                    self.handle_error(request, client_address)
                finally:
                    os._exit(1)

    def verify_request(self, request, client_address):
        return True

    pass

#
# Check for debug flag.
# 
if len(sys.argv) > 1 and sys.argv[1] == "-d":
    debug = 1
    pass

#
# Daemonize when not running in debug mode.
#
if not debug:
    #
    # Connect to syslog.
    #
    syslog.openlog("sslxmlrpc", syslog.LOG_PID,
                   getattr(syslog, "LOG_" + string.upper(LOGFACIL)))
    syslog.syslog(syslog.LOG_INFO, "SSL XMLRPC server starting up");

    #
    # Daemonize. We redirect our output into a log file cause I have no
    # idea what is going to use plain print. 
    #
    try:
        fp = open("@prefix@/log/sslxmlrpc_server.log", "a");
        sys.stdout = fp
        sys.stderr = fp
        sys.stdin.close();
        pass
    except:
        print "Could not open log file for append"
        sys.exit(1);
        pass

    pid = os.fork()
    if pid:
        os.system("echo " + str(pid) + " > /var/run/sslxmlrpc_server.pid")
        sys.exit(0)
        pass
    os.setsid();
    pass

#
# Create the server and serve forever. We register the instance above
# when we process the request cause we want to look at the cert before
# we decide on the priv level. 
# 
server = MyServer(debug)
while 1:
    server.handle_request()
