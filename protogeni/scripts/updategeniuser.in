#!/usr/bin/perl -w
#
# Copyright (c) 2008-2014 University of Utah and the Flux Group.
# 
# {{{GENIPUBLIC-LICENSE
# 
# GENI Public License
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and/or hardware specification (the "Work") to
# deal in the Work without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Work, and to permit persons to whom the Work
# is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Work.
# 
# THE WORK IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE WORK OR THE USE OR OTHER DEALINGS
# IN THE WORK.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Data::Dumper;

#
# Update a geni user.
#
sub usage()
{
    print STDERR "Usage: $0 [-c <credfile> -e <certfile>] [-s] <user>\n";
    exit(1);
}
my $optlist   = "c:se:n";
my $dosshkeys = 0;
my $impotent  = 0;
my $credfile;
my $certfile;

# Configure ...
my $TB		  = "@prefix@";
my $SACERT	  = "$TB/etc/genisa.pem";
my $ADDPUBKEY     = "$TB/sbin/addpubkey";

# Do this early so that we talk to the right DB. 
use vars qw($GENI_DBNAME);
BEGIN { $GENI_DBNAME = "geni"; }

use lib '@prefix@/lib';
use libtestbed;
use emutil;
use User;
use GeniCertificate;
use GeniCredential;
use GeniAuthority;
use Genixmlrpc;
use GeniResponse;
use GeniHRN;

# Protos
sub UpdateCredential();
sub UpdateSSHKeys();

sub fatal($)
{
    my ($msg) = @_;

    die("*** $0:\n".
	"    $msg\n");
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"s"})) {
    $dosshkeys = 1;
}
if (defined($options{"n"})) {
    $impotent = 1;
}
if (defined($options{"c"})) {
    $credfile = $options{"c"};
}
if (defined($options{"e"})) {
    $certfile = $options{"e"};
}
usage()
    if (@ARGV != 1);

my $target_user = User->Lookup($ARGV[0]);
if (!defined($target_user)) {
    fatal("No such user");
}
my $target_uid = $target_user->uid();

my $this_user = User->ThisUser();
if (!defined($this_user)) {
    fatal("Who are you?");
}
if (! ($this_user->SameUser($target_user) || $this_user->IsAdmin())) {
    fatal("Not allowed to update user; must be an admin");
}

if (defined($credfile)) {
    usage()
	if (!defined($certfile));
}
if (defined($certfile)) {
    usage()
	if (!defined($credfile));
    UpdateCredential()
}
if ($dosshkeys) {
    UpdateSSHKeys();
}
exit(0);

#
# Update the speaksfor credential for the user.
#
sub UpdateCredential()
{
    fatal("No such file: $credfile")
	if (! -e $credfile);
    fatal("No such file: $certfile")
	if (! -e $certfile);
    my $credential = GeniCredential->LoadFromFile($credfile);
    if (!defined($credential)) {
	fatal("Could not parse credential from file");
    }
    fatal("Not a speaksfor credential")
	if (! ($credential->type() eq "speaksfor" ||
	       $credential->type() eq "abac"));

    my $certificate = GeniCertificate->LoadFromFile($certfile);
    if (!defined($certificate)) {
	fatal("Could not parse certificate from file");
    }
    $target_user->StoreCredential($credential->asString(),
				  $credential->expires(),
				  $certificate->cert())
	== 0 or fatal("Could not store credential for user");

    return 0;
}

#
# Update ssh keys. 
#
sub UpdateSSHKeys()
{
    #
    # Load the SA cert to act as caller context.
    #
    my $sa_certificate = GeniCertificate->LoadFromFile($SACERT);
    if (!defined($sa_certificate)) {
	fatal("Could not load certificate from $SACERT\n");
    }
    my $context = Genixmlrpc->Context($sa_certificate);
    if (!defined($context)) {
	fatal("Could not create context to talk to MA");
    }
    
    #
    # Need the credential and the certificate. The certificate allows us
    # to figure out who to talk to, to get the keys. For protogeni it is
    # the URL in the certificate. For the GCF, well just hardwire it to
    # the common federation api URL. 
    #
    my ($cred,$cert) = $target_user->GetStoredCredential();
    fatal("No stored credential for $target_user")
	if (!defined($cred) || !defined($cert));
    
    my $speaksfor = GeniCredential->CreateFromSigned($cred);
    if (!defined($speaksfor)) {
	fatal("Could not parse credential from string");
    }
    my $geni_type = ($speaksfor->type() eq "abac") ? "geni_abac" : "geni_sfa";
    my $geni_vers = ($speaksfor->type() eq "abac") ? 1 : 3;
	
    my $certificate = GeniCertificate->LoadFromString($cert);
    if (!defined($certificate)) {
	fatal("Could not parse certificate from string");
    }
    my $user_urn = $certificate->urn();

    #
    # We need a URL to make the RPC. IG certs have that url in
    # the certificate (clever people that we are), but GPO certs refer
    # to a nonexistent SA. So just hardwire it, just like flack
    # does.
    #
    # We are going to use the FED API. 
    #
    my @params = ([{"geni_type" => $geni_type,
		    "geni_version" => $geni_vers,
		    "geni_value" => $speaksfor->asString()}
		  ],
		  # Options array.
		  {"speaking_for" => $user_urn,
		   "geni_speaking_for" => $user_urn,
		   "match"   => {'KEY_MEMBER' => $user_urn},
		   "filter"  => ['KEY_PUBLIC'],
		  });
    my $method;
    my $url;
    my ($auth,$type,$id) = GeniHRN::Parse($user_urn);
    if ($auth =~ /geni\.net/) {
	$url = "https://ch.geni.net/MA";
	$method = "lookup";
	@params = ("KEY", @params);
    }
    else {
	$url = $certificate->url();
	$url =~ s/sa$/geni-ma/;
#	$url = "https://www.emulab.net:12369/protogeni/stoller/xmlrpc/geni-ma";
	$method = "lookup_keys";
    }
    my $response =
	Genixmlrpc::CallMethod($url, $context, $method, @params);
    if (!defined($response)) {
	fatal("Internal error getting self credential");
    }
    if ($response->code() != GENIRESPONSE_SUCCESS) {
	fatal("Could not get keys: " . $response->output());
    }
    if (! (ref($response->value()) &&
	   exists($response->value()->{$user_urn}) &&
	   ref($response->value()->{$user_urn}))) {
	fatal("Returned keys do not look right");
    }
    my @keys = @{ $response->value()->{$user_urn} };
    if (!@keys) {
	fatal("No keys returned for user!");
    }
    my $filename = TBMakeTempFile("geniuserkey");

    #
    # First loop and verify all the keys. 
    #
    foreach my $ref (@keys) {
	fatal("Bad format in key array; no KEY_PUBLIC")
	    if (!exists($ref->{'KEY_PUBLIC'}));
	my $key = $ref->{'KEY_PUBLIC'};
	next
	    if ($key =~ /sslcert/);
	open(KEY, ">$filename") or
	    fatal("Could not open $filename for writing");
	print KEY $key . "\n";
	close(KEY);

	system("$ADDPUBKEY -n -f $filename");
	if ($?) {
	    fatal("Key does not verify: $key");
	}
    }
    if ($impotent) {
	print "Exiting without doing anything ...\n";
	exit(0);
    }
    
    #
    # Delete current keys and add all of the new ones.
    #
    $target_user->DeleteSSHKeys() == 0
	or fatal("Could not delete current ssh keys");

    foreach my $ref (@keys) {
	my $key = $ref->{'KEY_PUBLIC'};
	next
	    if ($key =~ /sslcert/);
	open(KEY, ">$filename") or
	    fatal("Could not open $filename for writing");
	print KEY $key . "\n";
	close(KEY);

	system("$ADDPUBKEY -s -u $target_uid -f $filename");
	if ($?) {
	    fatal("Could not add key: $key");
	}
    }
    unlink($filename);

    #
    # Regenerate the authkeys file,
    #
    system("$ADDPUBKEY -w $target_uid");
    if ($?) {
	fatal("Could not regenerate authorized_keys file");
    }
    return 0;
}
exit(0);
