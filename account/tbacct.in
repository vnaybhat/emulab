#!/usr/bin/perl -wT

#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use Getopt::Std;

#
# Deal with user accounts. This script does not deal with group stuff.
# Just add/del/mod/passwd/freeze/thaw/ stuff. We do give users an
# initial group of course, which will be guest if not in any groups.
#
# This script is setuid. We farm stuff out to subscripts though, and need
# to be wary of what the UID/EUID is when those scripts are invoked. The
# subscripts are not generally setuid, but of course the web interface
# allows users to do things on behalf of other users, and we want to track
# that in the audit log.
#
# Use -u for update mode, which skips the checks on current status,
# and forces the target user into that state. Eventually, this should
# be the default mode of operation (independent of web interface).
#
sub usage()
{
    print("Usage: tbacct [-f] [-b] [-u] ".
	  "<add|del|mod|passwd|wpasswd|email|freeze|thaw|verify|revoke> ".
	  "<user> [args]\n");
    exit(-1);
}
my $optlist = "fbu";
my $force   = 0;
my $batch   = 0;
my $update  = 0;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS	= "@TBOPSEMAIL@";
my $TBLOGS	= "@TBLOGSEMAIL@";
my $TBAUDIT	= "@TBAUDITEMAIL@";
my $CONTROL	= "@USERNODE@";
my $BOSSNODE	= "@BOSSNODE@";
my $WITHZFS     = @WITHZFS@;
my $WITHSFS	= @SFSSUPPORT@;
my $WIKISUPPORT = @WIKISUPPORT@;
my $TRACSUPPORT = @TRACSUPPORT@;
my $BUGDBSUPPORT= @BUGDBSUPPORT@;
my $OPSDBSUPPORT= @OPSDBSUPPORT@;
my $CHATSUPPORT = @CHATSUPPORT@;
my $MAILMANSUPPORT= @MAILMANSUPPORT@;
my $THISHOMEBASE= "@THISHOMEBASE@";
my $PROTOUSER   = 'elabman';
my $ELABINELAB  = @ELABINELAB@;
my $PGENISUPPORT= @PROTOGENI_SUPPORT@;
my $GENIRACK    = @PROTOGENI_GENIRACK@;

my $SAMBANODE	= "fs";  # DNS makes this do the right thing in E-in-E.
my $SMBPASSWD	= "/usr/local/bin/smbpasswd";

my $USERPATH	= "$TB/bin";
my $ADDKEY	= "$TB/sbin/addpubkey";
my $USERADD	= "/usr/sbin/pw useradd";
my $USERDEL	= "/usr/sbin/pw userdel";
my $USERMOD	= "/usr/sbin/pw usermod";
my $CHPASS	= "/usr/bin/chpass";
my $ACCOUNTPROXY= "$TB/sbin/accountsetup";
my $SFSKEYGEN	= "/usr/local/bin/sfskey gen";
my $GENELISTS	= "$TB/sbin/genelists";
my $MKUSERCERT	= "$TB/sbin/mkusercert";
my $SFSUPDATE	= "$TB/sbin/sfskey_update";
my $PBAG	= "$TB/sbin/paperbag";
my $EXPORTSSETUP= "$TB/sbin/exports_setup";
my $ADDWIKIUSER = "$TB/sbin/addwikiuser";
my $DELWIKIUSER = "$TB/sbin/delwikiuser";
my $ADDTRACUSER = "$TB/sbin/tracuser";
my $DELTRACUSER = "$TB/sbin/tracuser -r";
my $ADDBUGDBUSER= "$TB/sbin/addbugdbuser";
my $DELBUGDBUSER= "$TB/sbin/delbugdbuser";
my $ADDCHATUSER = "$TB/sbin/addjabberuser";
my $DELCHATUSER = "$TB/sbin/deljabberuser";
my $MMMODIFYUSER= "$TB/sbin/mmmodifymember";
my $ADDMMUSER   = "$TB/sbin/addmmuser";
my $DELMMUSER   = "$TB/sbin/delmmuser";
my $OPSDBCONTROL= "$TB/sbin/opsdb_control";
my $ADDHOOK     = "$TB/sbin/adduserhook";
my $SETGROUPS   = "$TB/sbin/setgroups";
my $NOLOGIN	= "/sbin/nologin";
my $POSTCRL     = "$TB/sbin/protogeni/postcrl";
my $SSH		= "$TB/bin/sshtb";
my $SAVEUID	= $UID;
my $NOSUCHUSER  = 67;
my $USEREXISTS  = 65;
# Nasty. Should do this with /etc/pw.conf shellpath.
my %shellpaths  = ("csh"  => "/bin/csh", "sh" => "/bin/sh",
		   "tcsh" => "/bin/tcsh", "bash" => "/usr/local/bin/bash",
		   "zsh" => "/usr/local/bin/zsh",
		   "nologin" => "/usr/sbin/nologin");

my $errors      = 0;
my $sfsupdate   = 0;
my @row;
my $query_result;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# This script is setuid, so please do not run it as root. Hard to track
# what has happened.
#
if ($UID == 0) {
    die("*** $0:\n".
	"    Please do not run this as root! Its already setuid!\n");
}

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libaudit;
use libdb;
use libtestbed;
use User;
use Project;

#
# Function prototypes
#
sub AddUser();
sub DelUser();
sub UpdatePassword();
sub UpdateWindowsPassword();
sub UpdateUser(;$);
sub FreezeUser();
sub ThawUser();
sub VerifyUser();
sub UpdateEmail();
sub CheckDotFiles();
sub GenerateSFSKey();
sub RevokeUser();
sub fatal($);

my $HOMEDIR	= USERROOT();

#
# Rewrite audit version of ARGV to prevent password in mail logs.
#
if (scalar(@ARGV) == 3 && $ARGV[0] eq "passwd") {
    my @NEWARGV = @ARGV;

    $NEWARGV[scalar(@NEWARGV) - 1] = "**********";
    AuditSetARGV(@NEWARGV);
}

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"b"})) {
    $batch = 1;
}
if (defined($options{"u"})) {
    $update = 1;
}
if (@ARGV < 2) {
    usage();
}
my $cmd  = shift(@ARGV);
my $user = shift(@ARGV);

#
# Untaint the arguments.
#
if ($user =~ /^([-\w]+)$/i) {
    $user = $1;
}
else {
    die("Tainted argument: $user\n");
}
if ($cmd =~ /^(add|del|mod|freeze|passwd|wpasswd|thaw|email|verify|revoke)$/) {
    $cmd = $1;
}
else {
    usage();
}

# Only admins can use force mode.
if ($force && ! TBAdmin($UID)) {
    fatal("Only admins can use force mode!");
}

# Map target user to object.
my $target_user = User->Lookup($user);
if (! defined($target_user)) {
    fatal("$user does not exist!");
}

#
# Map invoking user to object. 
# If invoked as "nobody" its for a user with no actual account, and so
# just set the current user to that user. If we make any callouts it will
# fail (verbosely of course).
#
my $this_user;

if (getpwuid($UID) eq "nobody") {
    $this_user = $target_user;
}
else {
    $this_user = User->ThisUser();

    if (! defined($this_user)) {
	fatal("You ($UID) do not exist!");
    }
}

#
# This script is always audited. Mail is sent automatically upon exit.
#
if (AuditStart(0)) {
    #
    # Parent exits normally
    #
    exit(0);
}

#
# Get the user info (the user being operated on).
#
my $dbid        = $target_user->dbid();
my $pswd        = $target_user->pswd();
my $user_number = $target_user->unix_uid();
my $fullname    = $target_user->name();
my $user_email  = $target_user->email();
my $status      = $target_user->status();
my $webonly     = $target_user->webonly();
my $usr_shell   = $target_user->shell();
my $usr_admin   = $target_user->admin();
my $wpswd       = $target_user->w_pswd();
my $wikionly    = $target_user->wikionly();
my $isnonlocal  = $target_user->IsNonLocal();
my $nocollabtools = $target_user->nocollabtools();
$usr_shell = "nologin"
    if (!defined($usr_shell));

#
# Get the users earliest project membership to use as the default group
# for the case that the account is being (re)created. We convert that to
# the unix info.
#
my $firstproject;
my $default_groupname;
my $default_groupgid;

if ($target_user->FirstApprovedProject(\$firstproject) < 0) {
    fatal("Could not determine first approved project for $target_user");
}

if (defined($firstproject)) {
    $default_groupname = $firstproject->unix_name();
    $default_groupgid  = $firstproject->unix_gid();
}
else {
    print "No group membership for $user; using the guest group!\n";

    ($default_groupname,undef,$default_groupgid,undef) = getgrnam("guest");
}

#
# Now dispatch operation.
#
SWITCH: for ($cmd) {
    /^add$/ && do {
	AddUser();
	last SWITCH;
    };
    /^del$/ && do {
	DelUser();
	last SWITCH;
    };
    /^passwd$/ && do {
	UpdatePassword();
	last SWITCH;
    };
    /^wpasswd$/ && do {
	UpdateWindowsPassword();
	last SWITCH;
    };
    /^email$/ && do {
	UpdateEmail();
	last SWITCH;
    };
    /^mod$/ && do {
	UpdateUser();
	last SWITCH;
    };
    /^freeze$/ && do {
	FreezeUser();
	last SWITCH;
    };
    /^thaw$/ && do {
	ThawUser();
	last SWITCH;
    };
    /^revoke$/ && do {
	RevokeUser();
	last SWITCH;
    };
    /^verify$/ && do {
	VerifyUser();
	last SWITCH;
    };
}

# Always do this!
CheckDotFiles();

#
# Invoke as real user for auditing (and cause of perl).
#
if ($WITHSFS && $sfsupdate) {
    $EUID = $UID;
    system($SFSUPDATE) == 0
	or fatal("$SFSUPDATE failed!");
    $EUID = 0;
}

#
# Now schedule account updates on all the nodes that this person has
# an account on.
#
TBNodeUpdateAccountsByUID($user);

exit(0);

#
# Add new user.
#
sub AddUser()
{
    #
    # Check status. Only active users get accounts built.
    #
    if ($webonly || $wikionly || $status ne USERSTATUS_ACTIVE) {
	if ($webonly) {
	    return 0;
	}
	#
	# Allow for users to be initialized to frozen in an inner Emulab.
	#
	if ($ELABINELAB && $status eq USERSTATUS_FROZEN) {
	    print STDERR "Ignoring frozen user in elabinelab\n";
	    return 0;
	}
	if ($wikionly) {
	    $EUID = $UID;

	    # And to the wiki if enabled.
	    system("$ADDWIKIUSER $user")
		if ($WIKISUPPORT && !$batch);
	    
	    # And to the bugdb if enabled.
	    system("$ADDBUGDBUSER $user")
		if ($BUGDBSUPPORT && !$batch);
	    
	    $EUID = 0;
	    return 0;
	}
	if ($force) {
	    $target_user->SetStatus(USERSTATUS_ACTIVE());
	    $status = USERSTATUS_ACTIVE();
	}
	else {
	    fatal("$user is not active! ".
		  "Cannot build an account! Use -f option.");
	}
    }

    $UID = 0;
    if (system("egrep -q -s '^${user}:' /etc/passwd")) {
	print "Adding user $user ($user_number) to local node.\n";

	if (system("$USERADD $user -u $user_number -c \"$fullname\" ".
		   "-h - -d $HOMEDIR/$user ".
		   "-g $default_groupname -s $PBAG")) {
	    fatal("Could not add user $user to local node.");
	}
    }

    #
    # Quote special chars for ssh and the shell on the other side
    #
    $fullname =~ s/\"/\'/g;
    $fullname =~ s/([^\\])([\'\"\(\)])/$1\\$2/g;

    if (1) {
	print "Adding user $user ($user_number) to $CONTROL.\n";

	if (system("$SSH -host $CONTROL ".
		   "'$ACCOUNTPROXY adduser $user $user_number \"$fullname\" ".
		   "$HOMEDIR/$user $default_groupname ".
		   "$shellpaths{$usr_shell}'")) {
	    if ($?) {
		fatal("Could not add user $user ($user_number) to $CONTROL.");
	    }
	}

	#
	# Leave the password "starred" on elabinelab; safer.
	#
	if (!$ELABINELAB || $GENIRACK) {
	    # shell escape.
	    $pswd =~ s/\$/\\\$/g;
	    $pswd =~ s/\*/\\\*/g;

	    print "Initializing user $user password on $CONTROL.\n";
	    if (system("$SSH -host $CONTROL $CHPASS -p '$pswd' $user")) {
		fatal("Could not initialize password for $user on $CONTROL!");
	    }
	}

	#
	# Extra hook added for CMU. Generalize later.
	#
	if ($THISHOMEBASE =~ /^cmuemulab$/i) {
	    print "Running post create hook for user $user on $CONTROL.\n";

	    # Do not worry about failure. 
	    system("$SSH -host $CONTROL $ADDHOOK $user");
	}
    }
    if ($WITHZFS) {
	#
	# There is some lag before the automounter can mount the new
	# volume. Lets delay until we can access the directory.
	#
	for (my $i = 0; $i < 10; $i++) {
	    sleep(1)
		if (! -r "$HOMEDIR/$user/.cshrc");
	}
	if (! -r "$HOMEDIR/$user/.cshrc") {
	    fatal("Could not access new user directory");
	}
    }
    $UID = $SAVEUID;

    #
    # Do the ssh thing. Invoke as real user for auditing.
    #
    $EUID = $UID;
    if ($user ne $PROTOUSER && system("$ADDKEY -i $user")) {
	fatal("Could not generate initial ssh key for $user");
    }

    #
    # And the mailman lists if enabled. All users must get this cause
    # mailman is used for project mail lists. when MAILMANSUPPORT=1
    #
    system("$ADDMMUSER $user")
	if ($MAILMANSUPPORT);
    
    if ($isnonlocal) {
	$EUID = 0;
	goto skipstuff;
    }
    
    # Generate the SSL cert for the user.
    system("$MKUSERCERT $user");

    #
    # If the user requested an initial encrypted SSL certificate, create
    # that too. Need to delete the initial_passphrase slot though, so that
    # we do not try to recreate it at some future time.
    #
    if (defined($target_user->initial_passphrase())) {
	my $pphrase = User::escapeshellarg($target_user->initial_passphrase());
	
	system("$MKUSERCERT -p $pphrase $user");
	if ($?) {
	    fatal("Could not create initial encrypted SSL certificate");
	}
	$target_user->Update({'initial_passphrase' => "NULL"});
    }
    
    if ($nocollabtools) {
	$EUID = 0;
	goto skipstuff;
    }
    
    # Add to elists.
    system("$GENELISTS -u $user")
	if (! $batch);

    # And to the wiki if enabled.
    system("$ADDWIKIUSER $user")
	if ($WIKISUPPORT && $user ne $PROTOUSER);

    # And to the bugdb if enabled.
    system("$ADDBUGDBUSER $user")
	if ($BUGDBSUPPORT && $user ne $PROTOUSER);

    # And to the OPS db if enabled.
    system("$OPSDBCONTROL adduser $user")
	if ($OPSDBSUPPORT && $user ne $PROTOUSER);

    # And to the chat server if enabled.
    system("$ADDCHATUSER $user")
	if ($CHATSUPPORT && $user ne $PROTOUSER);

    # And to the trac system if enabled.
    system("$ADDTRACUSER $user")
	if ($TRACSUPPORT && $user ne $PROTOUSER);

    #
    # Must update the exports file or else nodes will complain.  There
    # is a bit of race in here since this update happens after the
    # user is marked "active", and in that time a node could suck over
    # the account info, but not be able to mount the directory. Short
    # window though. Do not worry about the exit value. Note that this
    # could hang for a while if another update is in progress. Hmm, I
    # do not like this.
    #
    if (! $batch) {
	print "Updating exports file.\n";
	system("$EXPORTSSETUP");
    }
    $EUID = 0;

    # SFS key.
    if ($CONTROL ne $BOSSNODE) {
	GenerateSFSKey();
    }
  skipstuff:
    return 0;
}

#
# Delete a user.
#
sub DelUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to delete user $user.");
    }
    #
    # Check status. Active indicates something is wrong.
    #
    if (!$force && $status eq USERSTATUS_ACTIVE) {
	fatal("$user is still active! Cannot delete the account!");
    }

    print "Deleting user $user ($user_number) from local node.\n";

    $UID = 0;

    if (system("$USERDEL $user")) {
	if (($? >> 8) != $NOSUCHUSER) {
	    fatal("Could not remove user $user from local node.");
	}
    }

    if (1) {
	print "Removing user $user from $CONTROL\n";

	if (system("$SSH -host $CONTROL ".
		   "   '$ACCOUNTPROXY deluser $user $HOMEDIR/$user'")) {
	    if ($?) {
		fatal("Could not remove user $user from $CONTROL.");
	    }
	}
    }
    $UID = $SAVEUID;

    goto skipstuff
	if ($isnonlocal || $nocollabtools);
    
    $EUID = $UID;
    #
    # Must update the exports file or else nodes will complain.  Note
    # that this could hang for a while if another update is in progress. 
    #
    print "Updating exports file.\n";
    system("$EXPORTSSETUP");

    # Remove from elists.
    system("$GENELISTS -u $user");

    # And to the wiki if enabled.
    system("$DELWIKIUSER $user")
	if ($WIKISUPPORT);
    
    # And the chat server if enabled.
    system("$DELCHATUSER $user")
	if ($CHATSUPPORT);
    
    # And the mailman lists if enabled.
    system("$DELMMUSER $user")
	if ($MAILMANSUPPORT);
    
    # And to the trac system if enabled.
    system("$DELTRACUSER $user")
	if ($TRACSUPPORT);

    $EUID = 0;

    $sfsupdate = 1;
  skipstuff:
    return 0;
}

#
# Change a password for the user on the control node. The local password
# is not touched!
#
sub UpdatePassword()
{
    #
    # New password (encrypted) comes in on the command line. 
    #
    usage()
	if (! @ARGV);

    my $new_pswd  = shift(@ARGV);

    # Lets not do this if no changes.
    if ($new_pswd eq $target_user->pswd()) {
	print "Password has not changed ...\n";
	return 0;
    }

    # Lets prevent any odd characters.
    if ($new_pswd =~ /[\'\\\"\&]+/) {
	fatal("Invalid characters in new password encryption string!");
    }

    #
    # Insert into database. When changing password for someone else,
    # always set the expiration to right now so that the target user
    # is "forced" to change it. 
    #
    my $expires;
    
    if (! $target_user->SameUser($this_user)) {
	$expires = "now()";
    }
    else {
	$expires = "date_add(now(), interval 1 year)";
    }

    if ($target_user->SetPassword($new_pswd, $expires)) {
	fatal("Could not update password encryption string for $target_user");
    }

    # Go no further if a nonlocal user.
    return 0
	if ($isnonlocal);

    # Send auditing email before next step in case of failure.
    SENDMAIL("$fullname <$user_email>",
	     "Password for '$user' has been changed",
	     "\n".
	     "Emulab password for '$user' has been changed by " .
	            $this_user->uid() ."\n".
	     "\n".
	     "Name:              " . $target_user->name()  . "\n".
	     "IDX:               " . $target_user->uid_idx()  . "\n".
	     "\n".
	     "If this is unexpected, please contact Testbed Operations\n".
	     "($TBOPS) immediately!\n".
	     "\n",
	     "$TBOPS",
	     "Bcc: $TBAUDIT");

    # Go no further if a webonly user.
    return 0
	if ($webonly);

    #
    # Go no further if user is not active or frozen.
    #
    return 0
	if (! ($status eq USERSTATUS_ACTIVE || $status eq USERSTATUS_FROZEN));

    #
    # Change on ops only if there is a real account there.
    # For ELABINELAB, safer to leave the password "starred".
    #
    if (!$wikionly && (!$ELABINELAB || $GENIRACK)) {
	#
	# Grab from the DB to avoid taint checking sillyness.
	#
	my $safe_pswd = $target_user->pswd();
	# shell escape.
	$safe_pswd    =~ s/\$/\\\$/g;
	$safe_pswd    =~ s/\*/\\\*/g;
	
	$UID = 0;
	if ($CONTROL ne $BOSSNODE) {
	    print "Updating user $user password on $CONTROL.\n";
	    
	    if (system("$SSH -host $CONTROL $CHPASS -p '$safe_pswd' $user")) {
		fatal("Could not change password for user $user on $CONTROL!");
	    }
	}
	$UID = $SAVEUID;
    }

    #
    # Ick. If invoked as "nobody" then the user was either frozen or
    # inactive. Lets skip the rest of this for now. Needs more thought
    # and cleanup in the web interface to this, since we cannot call
    # out to these scripts as "nobody" (yet).
    #
    return 0
	if (getpwuid($UID) eq "nobody");

    return 0
	if ($isnonlocal || $nocollabtools);
    
    $EUID = $UID;
    # And the wiki if enabled.
    system("$ADDWIKIUSER -u $user")
	if ($WIKISUPPORT && $user ne $PROTOUSER && !$webonly);

    # And to the bugdb if enabled.
    system("$ADDBUGDBUSER -m $user")
	if ($BUGDBSUPPORT && $user ne $PROTOUSER && ! ($wikionly || $webonly));

    system("$ADDTRACUSER -u $user")
	if ($TRACSUPPORT && $user ne $PROTOUSER && !$webonly);

    $EUID = 0;
    
    return 0;
}

#
# Change a Windows password for the user on the Samba server node.
# The local password is not touched!
#
sub UpdateWindowsPassword()
{
    #
    # New password (encrypted) comes in on the command line. 
    #
    usage()
	if (! @ARGV);
    my $new_wpswd  = shift(@ARGV);

    # Lets not do this if no changes.
    if (defined($target_user->w_pswd()) &&
	$new_wpswd eq $target_user->w_pswd()) {
	print "Password has not changed ...\n";
	return 0;
    }

    #
    # Insert into database.
    #
    if ($target_user->SetWindowsPassword($new_wpswd)) {
	fatal("Could not update Windows password string for $target_user");
    }

    # Go no further if a webonly user.
    return 0
	if ($webonly);

    #
    # Go no further if user is not active or frozen.
    #
    return 0
	if (! ($status eq USERSTATUS_ACTIVE || $status eq USERSTATUS_FROZEN));

    #
    # Change on ops for Samba only if there is a real account there.
    #
    if (! $wikionly) {
	# shell escape.
	$new_wpswd     =~ s/\$/\\\$/g;

	$UID = 0;
	print "Updating user $user Samba password on $SAMBANODE.\n";
	# -s = silent, -a = add user if necessary.
	open( SPCMD, "| $SSH -host $SAMBANODE $SMBPASSWD -s -a $user")
	    || fatal("Opening $SMBPASSWD pipe, user $user on $SAMBANODE: $! $?");
	local $SIG{PIPE} = sub { die "smbpasswd spooler pipe broke" };
	print SPCMD "$new_wpswd\n$new_wpswd\n";
	close SPCMD 
	    || fatal("Closing $SMBPASSWD pipe, user $user on $SAMBANODE: $! $?");

	$UID = $SAVEUID;
    }
    return 0;
}

#
# Update user info. Allow for optional shell change for freeze/thaw.
#
sub UpdateUser(;$)
{
    my ($freezeopt) = @_;
    my $locshellarg = "";
    my $remshellarg = "";

    #
    # Sanity check.
    #
    if ($webonly || $isnonlocal) {
	return 0;
    }
    if (!defined($freezeopt) && ($status ne USERSTATUS_ACTIVE)) {
	#
	# If doing a modification to a frozen user, then just ignore
	# it; the modification will happen later when the user is thawed.
	#
	if ($status eq USERSTATUS_FROZEN) {
	    print "Ignoring update of frozen user $user\n";
	    return 0;
	}
	fatal("$user is not active! Cannot update the account!");
    }

    # Shell is different on local vs control node.
    if (defined($freezeopt) && $freezeopt) {
	$locshellarg = "-s $NOLOGIN";
	$remshellarg = "-s $NOLOGIN";
    }
    else {
	# Admin users get a local shell.
	if ($usr_admin) {
	    $locshellarg = "-s " . $shellpaths{"tcsh"};
	}
	else {
	    $locshellarg = "-s $PBAG"
	}
	if (!defined($usr_shell) ||
	    !exists($shellpaths{$usr_shell})) {
	    $remshellarg = "-s " . $shellpaths{"tcsh"};
	}
	else  {
	    $remshellarg = "-s " . $shellpaths{$usr_shell};
	}
    }
    print "Updating user $user ($user_number) on local node.\n";

    $UID = 0;
    if (system("$USERMOD $user $locshellarg -c \"$fullname\" ")) {
	fatal("Could not modify user $user on local node.");
    }

    #
    # Quote special chars for ssh and the shell on the other side
    #
    $fullname =~ s/\"/\'/g;
    $fullname =~ s/([^\\])([\'\"\(\)])/$1\\$2/g;

    if ($CONTROL ne $BOSSNODE) {
	print "Updating user $user ($user_number) on $CONTROL\n";

	if (system("$SSH -host $CONTROL ".
		   "'$USERMOD $user $remshellarg -c \"$fullname\"'")) {
	    fatal("Could not modify user $user record on $CONTROL.");
	}
    }
    $UID = $SAVEUID;

    return 0
	if ($isnonlocal || $nocollabtools);
    
    $EUID = $UID;
    # Update elists in case email changed.
    system("$MMMODIFYUSER $user")
	if ($MAILMANSUPPORT && !$batch);
    
    # Update elists in case email changed.
    system("$GENELISTS -m -u $user");
    $EUID = 0;

    return 0;
}

#
# Change email address for user.
#
sub UpdateEmail()
{
    my $forward = "$HOMEDIR/$user/.forward";
    
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to update email for user $user.");
    }

    #
    # New email comes in on the command line. 
    #
    usage()
	if (! @ARGV);

    my $new_email = shift(@ARGV);

    # Lets not do this if no changes.
    return 0
	if ($new_email eq $user_email);

    # Must be valid.
    if (! TBcheck_dbslot($new_email, "users", "usr_email",
			 TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	fatal("Invalid characters in email address!");
    }

    my %args = ();
    $args{"usr_email"} = $new_email;

    if ($target_user->Update(\%args)) {
	fatal("Could not update email address for $target_user");
    }

    return 0
	if ($isnonlocal);

    # Send auditing email before next step in case of failure.
    SENDMAIL("$fullname <$user_email>",
	     "Email Address for '$user' Modified",
	     "\n".
	     "Email Address for '$user' changed by " . $this_user->uid() ."\n".
	     "\n".
	     "Name:              " . $target_user->name()  . "\n".
	     "IDX:               " . $target_user->uid_idx()  . "\n".
	     "Old Email:         " . $user_email . "\n".
	     "New Email:         " . $new_email . "\n".
	     "\n".
	     "If this is unexpected, please contact Testbed Operations\n".
	     "($TBOPS) immediately!\n".
	     "\n",
	     "$TBOPS",
	     "CC: $new_email\n".
	     "Bcc: $TBAUDIT");

    # Change global in this script. 
    $user_email = $target_user->email();

    $EUID = $UID;

    # Update mailman elists.
    system("$MMMODIFYUSER $user")
	if ($MAILMANSUPPORT);
    
    # Update system elists.
    system("$GENELISTS -m -u $user");

    $EUID = 0;

    # Remove the users current .forward file to force regen.
    unlink($forward)
	if (-e $forward);
    
    return 0;
}

#
# Freeze a user.
#
sub FreezeUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to freeze user $user.");
    }
    #
    # Check status.
    #
    if ($status ne USERSTATUS_FROZEN) {
	fatal("$user is still active! Cannot freeze the account!")
	    if (!$update);

	$target_user->SetStatus(USERSTATUS_FROZEN());
	$status = USERSTATUS_FROZEN();
    }
    $sfsupdate = 1;

    return UpdateUser(1);
}

#
# Thaw a user.
#
sub ThawUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to thaw user $user.");
    }
    #
    # Check status.
    #
    if ($status ne USERSTATUS_ACTIVE) {
	fatal("$user is not active! Cannot thaw the account!")
	    if (!$update);
	$target_user->SetStatus(USERSTATUS_ACTIVE());
	$status = USERSTATUS_ACTIVE();
    }
    $sfsupdate = 1;

    #
    # This lets users start off as frozen in an ELABINELAB, and then
    # get created later. Saves a lot of time.
    #
    if ($ELABINELAB &&
	system("egrep -q -s '^${user}:' /etc/passwd")) {
	
	AddUser() == 0
	    or fatal("Cannot thaw $user");

	system("$USERMOD -n $user -s /bin/tcsh");
    }
    else {
	UpdateUser(0) == 0
	    or fatal("Cannot thaw $user");
    }

    #
    # Invoke as real user for auditing.
    #
    $EUID = $UID;
    system("$SETGROUPS $user");
    $EUID = 0;
    
    return 0;
}

#
# Verify a user. Converts status and sends email
#
sub VerifyUser()
{
    #
    # Only admin people can do this unless its the user himself.
    #
    if (! $target_user->SameUser($this_user) && ! TBAdmin()) {
	fatal("You do not have permission to verify user $user.");
    }

    if ($target_user->status() ne USERSTATUS_NEWUSER) {
	fatal("$target_user is not a newuser! Cannot verify the account!");
    }

    my $newstatus = ($target_user->wikionly() ?
		     USERSTATUS_ACTIVE() : USERSTATUS_UNAPPROVED());

    $target_user->SetStatus($newstatus) == 0 or
	fatal("Could not set user status to '$newstatus' for $target_user");

    $target_user->SendVerifiedEmail() == 0 or
	fatal("Could not send verified email for $target_user");

    return 0;
}

#
# Revoke user ssl certs
#
sub RevokeUser()
{
    #
    # Only admin people can do this.
    #
    if (! TBAdmin($UID)) {
	fatal("You do not have permission to thaw user $user.");
    }
    $target_user->RevokeSSLCerts();

    if ($PGENISUPPORT) {
	$UID = 0;
	system("$POSTCRL");
	if ($? >> 8 < 0) {
	    fatal("Could not post updated CRL");
	}
	$UID = $SAVEUID;
    }
    
    return 0;
}

#
# Check dot files. We do this over and over ...
#
sub CheckDotFiles()
{
    my $forward = "$HOMEDIR/$user/.forward";
    my $cshrc   = "$HOMEDIR/$user/.cshrc";
    my $profile = "$HOMEDIR/$user/.profile";

    # No home dirs for these.
    return 0
	if ($webonly || $isnonlocal);
    
    if (! -d "$HOMEDIR/$user") {
	return 0;
    }

    # As the user.
    $UID = $user_number;

    #
    # Set up a .forward file so that any email to them gets forwarded off.
    #
    if (! -e $forward) {
	print "Setting up .forward file for $user.\n";

	if (system("echo \"$user_email\" > $forward")) {
		fatal("Could not create $forward!");
	}
	chmod(0644, "$HOMEDIR/$user/.forward") or
		fatal("Could not chmod $forward: $!");
	$fileowner= (stat($forward))[4];
	$dochown=0;
	if ($fileowner==0) {
	    chown($user_number,$default_groupgid,"$HOMEDIR/$user/.forward") or
	      do {
		  warn("Could not chown $forward: $!");
		  $dochown=1;
	      };
	}
    }

    #
    # Add testbed path to .cshrc and .profile.
    # Plus a conditional Cygwin section for the Windows system path.
    #
    my $cpathstr = "set path = ($USERPATH \$path)\n" .
    'if ( `uname -s` =~ CYGWIN* ) then' . "\n" .
    '    setenv PATH "${PATH}:/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS"' . "\n" .
    'endif';
    if (-e $cshrc && system("egrep -q -s '$USERPATH' $cshrc")) {
	system("echo '$cpathstr' >> $cshrc");
    }

    my $spathstr = "PATH=$USERPATH:\$PATH\n" .
    'if [[ `uname -s` == CYGWIN* ]]; then' . "\n" .
    '    PATH="$PATH":/cygdrive/c/WINDOWS/system32:/cygdrive/c/WINDOWS' . "\n" .
    'fi';
    if (-e $profile && system("egrep -q -s '$USERPATH' $profile")) {
	system("echo '$spathstr' >> $profile");
    }
    $UID = $SAVEUID;

    if (defined($dochown) && $dochown!=0) {
	chown($user_number,$default_groupgid,"$HOMEDIR/$user/.forward") or
	  warn("Could not chown $forward: $!");
    }

    return 0;
}

#
# Do SFS stuff. Might move this out to its own script at some point.
#
sub GenerateSFSKey()
{
    my $sfsdir  = "$HOMEDIR/$user/.sfs";

    #
    # Set up the sfs key, but only if not done so already.
    # This has to be done from root because the sfs_users file needs
    # to be updated (and "sfskey register" won't work because it
    # prompts for the user's UNIX password if not run from root.)
    #
    if ($WITHSFS && ! -e "$sfsdir/identity") {
	if (! -e "$sfsdir" ) {
	    print "Setting up sfs configuration for $user.\n";

	    mkdir("$sfsdir", 0700) or
		fatal("Could not mkdir $sfsdir: $!");
	    chown($user_number, $default_groupgid, "$sfsdir") or
		fatal("Could not chown $sfsdir: $!");
	}

	print "Generating sfs key\n";
	$UID = 0;
 	if (system("$SSH -host $CONTROL '$SFSKEYGEN -KPn ".
 		   "$user\@ops.emulab.net $sfsdir/identity'")) {
	    fatal("Failure in sfskey gen!");
	}
	# Version 7 stuff for later.
	#if (system("$SSH -host $CONTROL '$SFSKEYGEN -KP ".
	#	    "-l $user\@ops.emulab.net $sfsdir/identity'")) {
	#    fatal("Failure in sfskey gen!");
	#}
	$UID = $SAVEUID;

	chown($user_number, $default_groupgid, "$sfsdir/identity") or
	    fatal("Could not chown $sfsdir/identity: $!");
	chmod(0600, "$sfsdir/identity") or
	    fatal("Could not chmod $sfsdir/identity: $!");

	#
	# Grab a copy for the DB. Causes an SFS update key to run so
	# that key is inserted into the files.
	#
	my $ident = `cat $sfsdir/identity`;

	if ($ident =~ /.*,.*,.*,(.*),(.*)/) {
	    # Version 6
	    DBQueryFatal("replace into user_sfskeys ".
			 "values ('$user', '$2', '${user}:${1}:${user}::', ".
			 "now())");
	}
	elsif ($ident =~ /.*:.*:.*:(.*):(.*)/) {
	    # Version 7
	    DBQueryFatal("replace into user_sfskeys ".
			 "values ('$user', '$2', '${user}:${1}:${user}::', ".
			 "now())");
	}
	else {
	    warn("*** $0:\n".
		 "    Bad emulab SFS public key\n");
	}
	$sfsupdate = 1;
    }
    return 0;
}

sub fatal($) {
    my($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}
