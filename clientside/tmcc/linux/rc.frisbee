#!/bin/sh
#
# Copyright (c) 2000-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
# Optional flag argument says "do not reboot"
#

MBR_PATH=/etc/emulab

secure=0
reboot=1
if [ $# -eq 1 ]; then
	if [ "$1" = "-noreboot" ]; then
		reboot=0
	elif [ "$1" = "-secure" ]; then
	    secure=1
	    reboot=0
	fi
fi

#
# Amount of memory in MB to leave for everyone else in the system.  If you
# get out-of-memory or vm_pager error while running frisbee, increase this.
#
RESIDMEM=32

#
# Maximum socket buffer size in KB.
# Big enough to buffer a whole chunk.
#
MAXSOCKBUF=1024

if [ -r /etc/emulab/paths.sh ]; then
	. /etc/emulab/paths.sh
else
	BINDIR=/etc/testbed
	BOOTDIR=/etc/testbed
	ETCDIR=/etc/testbed
fi

#
# Extract a variable of interest from the VAR=VALUE string and return value.
# If variable does not exist, return the given default (if provided).
#
getvar() {
    local _VAR=$1
    local _STR=$2
    local _DFL=$3

    for _kv in $_STR; do
	_k=${_kv%%=*}
	if [ -n "$_k" -a "$_k" = "$_VAR" ]; then
	    echo "${_kv##*=}"
	    return 0
	fi
    done
    echo "$_DFL"
    return 0
}

get_value()
{
    local data=$1
    local key=$2

    echo `getvar $key "$data"`
    return 0
}

#
# Update the MBR of the given disk to the indicated "version."
#
# XXX this is somewhat of a hack right now.  We recognize two
# versions of the MBR:
#	v1 (partition 1 size 6281352)
#	v2 (partition 1 size 12305790)
#	v3 (partition 1 size 33554432)
# Currently we only install a new MBR if the existing one is the
# wrong size, just in case the user has customized the boot program.
#
tweakmbr()
{
	local disk=$1
	local new_mbr_ver=$2
	local always=$3
	local cur_mbr_ver=''

	if ! dd if=$disk of=/dev/null bs=512 count=1 2>/dev/null; then
			echo "WARNING: could not read from $disk, MBR not changed"
			return 255
	fi

	size=`echo -e 'u\np\nq' | fdisk $disk 2> /dev/null| \
		sed -n "s#^${disk}1 *. *[0-9]* *[0-9]* *\([0-9]*\).*\\$#\1#p"`
	[ -n "$size" ] && size=`expr $size '*' 2`

	case ${size}s in
		6281352s)
			cur_mbr_ver=1
			;;
		12305790s)
			cur_mbr_ver=2
			;;
		33554432s)
			cur_mbr_ver=3
			;;
		s)
			echo "Found no MBR on $disk, installing version $new_mbr_ver"
			;;
		*)
			if [ $always -eq 1 ]; then
			    echo "WARNING: overwriting unknown MBR on $disk with version $new_mbr_ver"
			else
			    echo "WARNING: custom MBR on $disk, not changed"
			    return 0
			fi
			;;
	esac

	if [ "$cur_mbr_ver" = $new_mbr_ver ]; then
		return 0
	fi

	if ! [ -r $MBR_PATH/mbr${new_mbr_ver}.dd ]; then
		echo "WARNING: cannot find MBR version $new_mbr_ver, not installed"
		return 255
	fi

	echo "Installing MBR version $new_mbr_ver ..."
	dd if=$MBR_PATH/mbr${new_mbr_ver}.dd of=$disk bs=512 count=1

	# Zero out the partition type bytes for FreeBSD and Linux partitions
	# so that if the user tries to make a whole-disk image later it will
	# work without imagezip complaining about filesystem-specific errors
	# when the partition offsets have been adjusted.  Frisbee/imagezip
	# will write the correct type byte when it writes the image.
	#
	# The Linux swap partition is left alone because imagezip currently
	# blindly includes just the first portion of the swap partition without
	# checking to ensure it is valid.
	for i in 0 1; do
		dd if=/dev/zero of=$disk bs=1 count=1 seek=$(( $i * 16 + 450 )) > /dev/null 2>&1
	done

	# Linux won't re-read the partition table unless told to do so.
	# hdparm could be used for this, but it may not be installed.
	# fdisk tells the kernel to re-read the table after writing it
	# to disk, so we'll just use that.
	echo "Re-reading partition table ..."
	echo w | fdisk $disk > /dev/null 2>&1
}

find_disks() {
	local disks

	for d in /sys/block/[sh]d*; do
		disks="$disks ${d##*/}"
	done

	echo $disks
}

# Wipe out the superblocks on any partitions by zeroing the first 16 sectors.
# This implementation doesn't suffer the limitations of the FreeBSD one in that:
# A) All partitions get zapped, even if not DOS MBR partitions
# B) We can zap the partition device since Linux isn't overprotective of superblocks,
#    unlike FreeBSD.
zapsuperblocks()
{
	local disk=${1##*/}

	echo "Invalidating old potential superblocks on $disk"
	partitions=`echo /sys/block/$disk/$disk* 2>/dev/null`
	for part in $partitions; do
		dd if=/dev/zero of=/dev/${part##*/} bs=512 count=16 > /dev/null 2>&1
	done

	return 0
}

# FIXME shouldn't hard code "/images"
write_image()
{
	local address=$1
	local disk=$2
	local slice=$3
	local zfill=$4
	local ptype=$5
	local server=$6
	local keepalive=$7
	local imageid=""
	local imagefile=""
	local frisbee_opts="$FRISBEE_OPTS"
	local imageunzip_opts="$IMAGEUNZIP_OPTS"

	# ZFILL==1: use frisbee
	# ZFILL==2: separate disk-wipe pass (not yet implemented)
	if [ "$zfill" -ne 0 ]; then
		frisbee_opts="$frisbee_opts -z"
		imageunzip_opts="$imageunzip_opts -z"
	fi

	if [ "$keepalive" -ne 0 ]; then
		frisbee_opts="$frisbee_opts -K $keepalive"
	fi

	if [ $slice -ne 0 ]; then
		frisbee_opts="$frisbee_opts -s $slice"
		imageunzip_opts="$imageunzip_opts -s $slice"
		if [ -n "$ptype" ]; then
			frisbee_opts="$frisbee_opts -D $ptype"
		fi
	fi

	local protocol=${address%%://*}
	if [ $protocol = $address ]; then
		case $address in
			/*)  protocol=file ;;
			*,*) protocol=mfrisbee ;;
			*)   protocol=frisbee ;;
		esac
	fi

	case $protocol in
		frisbee)
			port=${address##*:}
			if [ $port = $address ]; then
				echo "*** WARNING: no port specified for frisbee"
				return 1
			fi
			address=${address%%:*}
			imageid="-m $address -p $port"
			;;
		mfrisbee)
			# address is of the form pid,gid,imagename
			pid=${address%%,*}
			imagename=${address##*,}
			if [ $pid = $address -o $imagename = $address ]; then
				echo "*** WARNING: could not parse imageid spec: $address"
				return 1
			fi
			#
			# Note: if you want to use broadcast rather that
			# multicast as the distribution method, add "-X bcast"
			# to the imageid= line below.
			#
			imageid="-B 30 -F $pid/$imagename"
			;;
		http|https)
			server=${address%%/*}
			filename=${address#*/}

			if ! [ -d /images ]; then
				echo "Need to create or mount /images directory!"
				return 1
			fi

			if ! $BINDIR/mkextrafs.pl -f $disk /images; then
		    		echo "Could not create /images partition"
				return 1
			fi

			wget -nv -N -P /images \
				$protocol://$server/$filename
			rc=$?
			if [ $rc -eq 0 ]; then
				echo "wget succeeded getting the image"
			else
				echo "wget failed, status $rc"
				return 1
			fi
			imagefile=/images/${filename##*/}
			;;
		file)
			imagefile=/$address
			;;
		*)
			echo "*** WARNING: Unsupported protocol $protocol!"
			return 1
			;;
	esac

	$BINDIR/tmcc state RELOADING

	if [ $protocol = frisbee -o $protocol = mfrisbee ]; then
		[ -n "$server" ] || server=$BOSSIP
		echo "$BINDIR/frisbee -S $server $imageid $frisbee_opts $disk"
		$BINDIR/frisbee -S $server $imageid $frisbee_opts $disk
		rc=$?

		if [ $rc -ne 0 ]; then
			echo "Frisbee run failed, status $rc"
			return $rc
		fi

		echo "Frisbee run finished"
		rc=0
	else
		$BINDIR/imageunzip $imageunzip_opts $imagefile $disk
		rc=$?
	fi

	if mount | grep /images > /dev/null; then
		umount /images
	fi

	return $rc
}

handle_loadinfo()
{
	local DISK=$1
	local PARTITION=$2
	local LOADINFO="$3"

	local ADDRESS=`get_value "$LOADINFO" ADDR`
	local SERVER=`get_value "$LOADINFO" SERVER`
	local PARTOS=`get_value "$LOADINFO" PARTOS`
	local IMAGEID=`get_value "$LOADINFO" IMAGEID`

	local ZFILL=`get_value "$LOADINFO" ZFILL`
	ZFILL=${ZFILL:-'0'}
	local KEEPALIVE=`get_value "$LOADINFO" KEEPALIVE`
	KEEPALIVE=${KEEPALIVE:-'0'}

	local ACPI=`get_value "$LOADINFO" ACPI`
	local ASF=`get_value "$LOADINFO" ASF`
	local NOCLFLUSH=`get_value "$LOADINFO" NOCLFLUSH`
	local MBR=`get_value "$LOADINFO" MBRVERS`
	local PREPARE=`get_value "$LOADINFO" PREPARE`
	local PTYPE=''
	local DOM0MEM=`get_value "$LOADINFO" DOM0MEM`

	#
	# XXX check for secure diskloading info.
	# XXX only return info for a single image right now
	#
	if [ -r /tmp/secureloadinfo.out ]; then
		local SINFO=`grep $IMAGEID /tmp/secureloadinfo.out`
		local UUID=`get_value "$SINFO" UUID`
		if [ -n "$UUID" ]; then
			FRISBEE_OPTS="$FRISBEE_OPTS -u $UUID"
		fi
		local SIGKEY=`get_value "$SINFO" SIGKEY`
		if [ -n "$SIGKEY" ]; then
			echo "$SIGKEY" | tr ',' '\n' > /tmp/sig.key
			FRISBEE_OPTS="$FRISBEE_OPTS -c /tmp/sig.key"
		fi
		local ENCKEY=`get_value "$SINFO" ENCKEY`
		if [ -n "$ENCKEY" ]; then
			echo "$ENCKEY" > /tmp/enc.key
			FRISBEE_OPTS="$FRISBEE_OPTS -e /tmp/enc.key"
		fi
	fi

	if [ -z "$ADDRESS" ]; then
		if [ -z "$IMAGEID" ]; then
		    echo "Unable to get imageid or address for loading image"
		    return 1
		fi
		ADDRESS=$IMAGEID
	fi

	if [ $PARTITION -ne 0 ]; then
		case $PARTOS in
			FreeBSD) PTYPE=165 ;;
			OpenBSD) PTYPE=166 ;;
			Fedora|Linux)   PTYPE=131 ;;
		esac
	fi

	# For slice images, ensure that the MBR is the correct version
	# and replace if not.
	if [ -z "$FIRSTMBR" ]; then
		if [ "$PARTITION" != "0" ]; then
		    tweakmbr /dev/$DISK $MBR $PREPARE
		    echo "Resizing final disk partition"
		    growdisk -vW /dev/$DISK
		fi
		FIRSTMBR=$MBR
	else
		if [ "$MBR" != "$FIRSTMBR" ]; then
			echo "MBR Mismatch: First MBR is \"$FIRSTMBR\" while image #$NUM is \"$MBR\""
		    fi
	fi

	# If not zeroing the disk and we are loading a full disk image
	# we need to ensure that we at least invalidate any old superblocks
	# that might leak through (most likely in partition 4 which isn't
	# touched by our current image).  We do this before running frisbee
	# so that any legit filesystems loaded from the image work.

	# Since we do it before frisbee, we are counting on the current
	# MBR being the same as the MBR being layed down.  While not
	# a reasonable assumption in general, it mostly works in our
	# environment and at least won't hurt anything if not true.
	if [ $PREPARE -eq 1 ] || [ $IS_REMOTE -eq 0 -a $PARTITION -eq 0 \
	                           -a $ZFILL -eq 0 ]; then
		zapsuperblocks /dev/$DISK
	fi

	write_image "$ADDRESS" "/dev/$DISK" "$PARTITION" "$ZFILL" "$PTYPE" "$SERVER" "$KEEPALIVE"
	rc=$?
	if [ $rc -ne 0 ]; then
		echo "Failed to write image to disk, status $rc"
		exit 1
	fi

	# remove keyfiles
	if [ -r /tmp/secureloadinfo.out ]; then
	    rm -f /tmp/enc.key /tmp/sig.key
	fi

	echo "Image load complete at `date`"
}

#
# Run slicefix on the indicated partition
# N.B. DISK here is the FreeBSD disk name
#
fixone() {
    DISK=$1
    PART=$2
    iline=$3

    echo "`date`: Adjusting slice-related files on $DISK slice $PART"

    export SLICEFIX_ACPI=`getvar ACPI "$iline" unknown`
    export SLICEFIX_ASF=`getvar ASF "$iline" unknown`
    export SLICEFIX_NOCLFLUSH=`getvar NOCLFLUSH "$iline" unknown`
    export SLICEFIX_VGAONLY=`getvar VGAONLY "$iline" unknown`
    export SLICEFIX_CONSOLE=`getvar CONSOLE "$iline" unknown`
    export SLICEFIX_BIOSDISK=`getvar BIOSDISK "$iline"`
    export SLICEFIX_DOM0MEM=`getvar DOM0MEM "$iline" unknown`
    $BINDIR/slicefix $PART $DISK
    return $?
}

get_loadinfo()
{
	# Occasionally there is some delay before tmcd reports back valid
	# loadinfo, so try repeatedly for 30 seconds and give up if we don't
	# get any data.
	time=30
	while [ $time -gt 0 ]; do
		# Just write it out to a tempfile to avoid extra nasty
		# shell script hacks.
		$BINDIR/tmcc loadinfo > /tmp/loadinfo.out
		[ -s /tmp/loadinfo.out ] && break
		sleep 1
		time=$(( $time - 1 ))
	done
	if [ $time -eq 0 ]; then
		return 1
	fi

	return 0
}

# See if we can map drive names to BIOS numbers via EDD
if [ -x $BINDIR/get_edd_map.pl ]; then
	$BINDIR/get_edd_map.pl > $BOOTDIR/edd_map
fi


# Behave a little different on widearea nodes.
IS_REMOTE=0
[ -e $ETCDIR/isrem ] && IS_REMOTE=1

BOSSINFO=`$BINDIR/tmcc bossinfo`
BOSSIP=${BOSSINFO##* }
STATUS=`$BINDIR/tmcc status`

if [ $secure -eq 1 ]; then
	## XXX this is done by "script1.sh" which takes pain to ensure we don't
	## hang accessing the TPM.
	#echo "Requesting secure load info data..."
	## -v 33 is temporary until tmcc binary is updated
	#if ! $BINDIR/tmcc -v 33 -T imagekey > /tmp/secureloadinfo.out; then
	#	echo "*** Failed to get secure loadinfo data" 1>&2
	#	exit 2
	#fi
	if [ ! -e "/tmp/secureloadinfo.out" ]; then
		echo "*** No secureloadinfo data!" 1>&2
		exit 3
	fi
else
	$BINDIR/tmcc state RELOADSETUP
fi

echo "Requesting loadinfo data... "
if ! get_loadinfo; then
	echo "*** Failed to get loadinfo data" 1>&2
	exit 2
fi
echo "Got loadinfo data"

# FIXME shouldn't hardcode path
if [ -x /usr/sbin/ntpdate ]; then
	/usr/sbin/ntpdate -b $BOSSIP >/dev/null 2>&1
fi

# Enable IPoD
if [ -r $BINDIR/rc/rc.ipod ]; then
	. $BINDIR/rc/rc.ipod
fi

# Try to map disks to BIOS drive numbers via EDD
# The map is created now before we touch any disks
# since we may need to use the MBR to determine
# which disk is which.
$BINDIR/get_edd_map > $BOOTDIR/edd_map 2>/dev/null


FRISBEE_OPTS="-f -S $BOSSIP"

if [ -e $BOOTDIR/myip ]; then
	FRISBEE_OPTS="-f -i `cat $BOOTDIR/myip`"
fi
IMAGEUNZIP_OPTS="-o -O -W 32"

RESIDMEM=32
RESIDMEM=`expr \( $RESIDMEM + 2 \) \* 1024`
FREEMEM=`free | sed -n 's/^-\/+ buffers.* \([0-9]*\)$/\1/p'`
if [ -z "$FREEMEM" ]; then
	# BusyBox's 'free' command has slightly different output
	FREEMEM=`free | sed -n 's/^  *Mem: *[0-9]* *[0-9]* *\([0-9]*\) *.*$/\1/p'`
fi
if [ $FREEMEM -gt $RESIDMEM ]; then
	BUFFERMEM=`expr $FREEMEM - $RESIDMEM`
	DATASEGSIZE=`ulimit -d`
	if ! [ $DATASEGSIZE = unlimited ] &&
	     [ $BUFFERMEM -gt $DATASEGSIZE ]; then
		BUFFERMEM=$DATASEGSIZE
		echo "WARNING: kernel limits buffering to $BUFFERMEM KB"
	else
		BUFFERMEM=`expr $BUFFERMEM / 1024`
	fi

	FRISBEE_OPTS="$FRISBEE_OPTS -M $BUFFERMEM"
fi

#
# Allow for large-ish socketbuf for frisbee
# NOTE: if the sysctl fails, it doesn't matter as frisbee will downsize
#
osbs=`sysctl -n net.core.rmem_max`
sbs=`expr $MAXSOCKBUF \* 1024`
if [ $sbs -gt $osbs ]; then
    sysctl -w net.core.rmem_max=$sbs
    sysctl -w net.core.wmem_max=$sbs
fi

# NOTE: make sure you install the latest frisbee client for -k!
FRISBEE_OPTS="$FRISBEE_OPTS -k $MAXSOCKBUF"

# Wipe the MBR and partition boot blocks on all disks if reloading
case $STATUS in
	*ALLOCATED=emulab-ops/reloading*)
		disks=`find_disks`
		for d in $disks; do
			#[ $d = $DISK ] && continue
			mount | grep "^/dev/$d" > /dev/null && continue
			zapsuperblocks /dev/$d
			echo "Invalidating MBR on /dev/$d"
			dd if=/dev/zero of=/dev/$d bs=512 count=16
		done

		# XXX tmp, gather HW info (including disk speed tests)
		if [ -x $BINDIR/rc.nodecheck ]; then
		    $BINDIR/rc.nodecheck boot
		fi
		;;
esac

#
# Load each image in turn.
# If a load fails, we exit non-zero so that the rc script will drop into
# single-user mode.  If all loads succeed we either reboot or continue with
# the rc script as desired by the caller.
#
FIRSTMBR=''
devs=""
while read line; do
    #
    # Remember the info for this partition line so we can run slicefix later.
    # Yes, we can load the same partition multiple times due to our delta
    # image mechanism.
    #
    # Note that we always overwrite the saved info so we wind up with the
    # info for the last image loaded on the slice. Thus we assume that the
    # last image loaded has the right info. Probably this will never matter
    # as delta images should always have the same attributes as the full
    # image loaded.
    #
    DISK=`getvar DISK "$line" ad0`

    # Convert from the FreeBSD device name to a Linux device name
    # and add that on to the info line.
    case $DISK in
	[hs]d[a-z])
	    LDISK=$DISK
	    ;;
	*)
	    LDISK=`$BINDIR/freebsd_to_linux_disk $DISK 0`
	    LDISK=${LDISK%% *}
	    ;;
    esac
    line="$line LDISK=$LDISK"

    PART=`getvar PART "$line" 0`
    dev="${DISK}_${PART}"
    devs="$devs $dev"
    eval ${dev}_info=\"$line\"

    # N.B. we pass the linux disk name here
    if ! handle_loadinfo $LDISK $PART "$line"; then
	echo "Failed to load disk, dropping to login prompt at `date`" 1>&2
	exit 1
    fi
done < /tmp/loadinfo.out
echo "`date`: Frisbee run(s) finished"

echo "`date`: Running slicefix"
for dev in $devs; do
    DISK=${dev%%_*}
    PART=${dev##*_}
    eval line=\$${dev}_info
    if [ -n "$line" ]; then
	fixone $DISK $PART "$line" || {
	    echo "`date`: WARNING: slicefix on $DISK slice $PART failed"
	}

	#
	# For a whole disk image, we resize the "extra" (4th) partition
	# after writing the image. Otherwise, the resize already happened
	# before the image was written (in case we needed the extra partition
	# for an image fetched via HTTP).
	#
	if [ $PART -eq 0 ]; then
	    echo "Resizing final disk partition"
	    LDISK=`getvar LDISK "$line" hda`
	    growdisk -vW /dev/$LDISK
	fi

	# whack the info so we don't slicefix again
	eval ${dev}_info=\"\"
    fi
done
echo "`date`: slicefix run(s) done"

rm -f /tmp/loadinfo.out /tmp/secureloadinfo.out

#
# If requested to reboot, do so.
#
# Note: there is a race condition with stated here.
# If we reboot immediately after sending RELOADDONE,
# it is possible that, under heavy server load, we will
# finish the reboot and reach the bootinfo stage before
# stated gets and processes our RELOADDONE.  So now we
# wait around after sending the RELOADDONE.  stated should
# force us to reboot when the transition takes place.
# For backward compatibility we use a new state: RELOADDONEV2.
# For paranoia we just wait around for awhile and then
# reboot anyway, just in case stated's reboot fails for
# some reason.
#
if [ $reboot -eq 1 ]; then
    $BINDIR/tmcc state RELOADDONEV2
    echo "Waiting for server to reboot us ..."
    if [ $IS_REMOTE -eq 1 ]; then
	sleep 30
    else
	sleep 240
    fi
    echo "No response from server, rebooting myself ..."
    /sbin/reboot
    sleep 100
else
    $BINDIR/tmcc state RELOADDONE
fi

#echo "Failed to load disk, dropping to login prompt at `date`"
#exit 1
