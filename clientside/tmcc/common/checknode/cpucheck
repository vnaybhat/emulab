#!/bin/bash
#
# Copyright (c) 2013 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#

echo -n ' Cpucheck..'

source checkutils.sh

x=$(caller)
[[ "${x/NULL}" = "$x" ]] && declare -ri cpucheck_standalone=0 || declare -ri cpucheck_standalone=1

declare arch="" failed="" s=""
declare -i sockets=0 cores_socket=0 threads_core=0 mhz=0 err=0
declare -i hyperthread=0  x64bit=0 hwvirt=0
declare p1="" p2="" p3=""
declare phy="" cid=" "
declare p p1 p3 p3 phy

finish() {
    echo -n "Cpucheck `date`: " >> ${logfile}

#    cat ${tmplog} >> ${logfile} 
    
    summary="Arch:$arch Sockets:$sockets Cores_socket:$cores_socket Threads_core:$th\
reads_core Mhz:$mhz HT:${hyperthread} 64bit:${x64bit} HV:${hwvirt}"
    if [ -z "${failed}" ]
    then
	echo -n "$summary"
	echo "$summary" >> ${logfile}
	echo "OK"
    else
	echo "$failed"
    fi
}

round1p() {
    # round up 1 place
    in=$1

    #truncate decimal
    y=${in%%.*}
    #count digits
    n=${#y}
    # according to #digits add roundup and get most sig-bits
    if [ $n == 6 ] ; then
	y=$(($y + 1000))
	y=$(($y / 10000))
	y=$(($y * 10000))
	echo -n $y
    elif [ $n == 5 ] ; then
	y=$(($y + 100))
	y=$(($y / 1000))
	y=$(($y * 1000))
	echo -n $y
    elif [ $n == 4 ] ; then
	y=$(($y + 10))
	y=$(($y / 100))
	y=$(($y * 100))
	echo -n $y
    elif [ $n == 3 ] ; then
	y=$(($y + 1))
	y=$(($y / 10))
	y=$(($y * 10))
	echo -n $y
    else
	echo -n $y 
	return 1
    fi
    return 0
}

initialize $@
cp /dev/null ${tmplog}

# check that external need program are installed

s=""
case $os in
    Linux )
	progs="grep"
	;;
    FreeBSD )
	progs="grep"
	;;
    * )
	failed="Unknown OS :$os: FAILED"
	finish
	exit 1
	;;
esac

for i in $progs ; do
    type $i &>/dev/null && continue  || s="$s $i "
done
if [ -n "$s" ] ; then
    failed=" Unable to run need missing command(s) $s FAILED"
    echo "$failed" >> ${tmplog}
    finish
fi

case $os in
    Linux )
	# XXX if have lscpu then us it to get arch
	save_e
	set +e
	    x=$(grep "model name" /proc/cpuinfo | head -1)
	    x=${x##*: }
	    #takeout all the spaces
	    x=${x// /}
	    [[ "${x:0:16}" == "Intel(R)Core(TM)" ]] && arch="x86_64" || arch=$x
	    [[ "${x:0:15}" == "Intel(R)Xeon(R)" ]] && arch="x86_64" || arch=$x

	    # count sockets using the max 'physical id' string
	    # need to find how many different ids there are, to bad on some 
	    # it starts at zero and on other machines it starts at 1

	    x=$(grep "physical id" /proc/cpuinfo)
	    if [ -z "$x" ] ; then
		sockets=1
	    else
		while read -rd p p1 p2 p3 phy  ; do
		    cid+="$phy "
		done <<< $x
		first=999 last=0
		for i in $cid ; do
		    [[ $i -lt $first ]] && first=$i
		    [[ $i -gt $last ]]  && last=$i
		done
		sockets=$(($last - $first))
		((++sockets))
	    fi

    	    x=$(grep "cpu cores" /proc/cpuinfo | head -1)
	    [[ "$x" ]] || x="cpu cores	: 1" 
	    x=${x##*: }
	    cores_socket=$x

    	    x=$(grep "siblings" /proc/cpuinfo | head -1)
	    [[ "$x" ]] || x="siblings	: 1" 
	    x=${x##*: }
	    threads_core=$(($x / $cores_socket))

    	    x=$(grep "processor" /proc/cpuinfo | tail -1)
	    x=${x##*: }
	    ((++x))
	    cpus=$x

	    #better if dmesg not to old; else use proc/cpuinfo
    	    dmesgmhz=$(dmesg | grep -i mhz | grep processor)
	    if [ -n "$dmesgmhz" ] ; then
		x=${dmesgmhz#*Detected }
		x=${x% MHz*}
	    else
		x=$(grep -i mhz /proc/cpuinfo | head -1)
		x=${x#*: }
	    fi
	    rawmhz=$x
	    mhz=$(round1p $rawmhz)

	    cpuflags=$(grep flags /proc/cpuinfo | head -1)
	    restore_e
	    [[ "${cpuflags}" = "${cpuflags/ht/}" ]] && hyperthread=0 || hyperthread=1
	    [[ "${cpuflags}" = "${cpuflags/lm/}" ]] && x64bit=0 || x64bit=1
	    [[ ("${cpuflags}" = "${cpuflags/vmx/}") && ("${cpuflags}" = "${cpuflags/svm/}") ]] && hwvirt=0 || hwvirt=1
	    ;;
    FreeBSD )
	    x=y=""
	    x=$(grep 'CPU:' /var/run/dmesg.boot | grep CPU:)

	    x=${x#CPU: }
	    x=${x%%CPU*}
	    x=${x%%([0-9]*}
		x=${x/Intel(R) /}
		x=${x/(R) /}
		x=${x// /} # remove all spaces
	    #standardize name
		case $x in
		    "IntelPentiumIII") arch="i686" ;;
		    "Xeon(TM)" | "Xeon" ) arch=x86_64 ;;
		    "IntelPentiumII") arch="i386" ;;
		    * ) arch="Unknown" ;;
		esac
		save_e
		set +e
		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep package)
		x=${x#FreeBSD/SMP: }
		[[ $x ]] && sockets=${x%%package*} || sockets=1

		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep core)
		x=${x#FreeBSD/SMP: }
		x=${x#*package(s) x }
		[[ $x ]] && cores_socket=${x%%core(s)*} || cores_socket=1
		
		x=$(grep 'FreeBSD/SMP:' /var/run/dmesg.boot | grep thread)
		x=${x#FreeBSD/SMP: }
		x=${x#*core(s) x }
		x=${x/HTT/SMT} # pc3000 vs r710
		[[ $x ]] && threads_core=${x%%SMT*} || threads_core=1
		
		x=$(grep 'CPU\|SMP' /var/run/dmesg.boot | grep CPU:)
		restore_e
		# example CPU: Intel(R) Xeon(TM) CPU 3.00GHz (2992.71-MHz 686-class CPU)
		x=${x%%-MHz*}
		mhz=$(round1p ${x##*(})
		    
		cpuflags="$(grep Features /var/run/dmesg.boot | head -1) $(grep Features2 /var/run/dmesg.boot | head -1) $(grep 'AMD Features' /var/run/dmesg.boot | head -1)"
		[[ "${cpuflags}" = "${cpuflags/HTT/}" ]] && hyperthread=0 || hyperthread=1
		[[ "${cpuflags}" = "${cpuflags/LM/}" ]] && x64bit=0 || x64bit=1
		[[ "${cpuflags}" = "${cpuflags/HVM/}" && ("${cpuflags}" = "${cpuflags/VMX/}") ]] && hwvirt=0 || hwvirt=1
		;;
    * )
	    echo "internal error cpucheck"
	    failed=FAIL
	    exit 1
	    ;;
esac

# if saving data for testbed database

[[ ${x64bit} == 1 ]] && bits=64 || bits=32
(( $collect_flag )) && printf "CPUINFO SOCKETS=%s CORES=%s THREADS=%s SPEED=%s BITS=%s HV=%s\n"\
      ${sockets} ${cores_socket} ${threads_core} ${mhz} ${bits} ${hwvirt} >> ${logfile4tb}

# we are done if in MFS mode
if (( $mfsmode )) ; then
   (( $cpucheck_standalone )) && exit 0 || return 0
fi

if (( $check_flag )) ; then
    tbinfo=$(getfromtb CPUINFO)
    err=$?
    if [ $err != 0 ] ; then 
	failed="call to tbinfo $tbinfo FAILED"; finish
    fi

    if [ "$tbinfo" = "SOCKETS=$sockets CORES=$cores_socket THREADS=$threads_core SPEED=$mhz BITS=$bits HV=$hwvirt" ] ; then
	failed=""
    else
	failed="TBmiss Have |SOCKETS=$sockets CORES=$cores_socket THREADS=$threads_core SPEED=$mhz BITS=$bits HV=$hwvirt| Want |$tbinfo| FAILED"
    fi
fi

finish

(( $cpucheck_standalone )) && exit 0 || return 0

