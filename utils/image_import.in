#!/usr/bin/perl -w
#
# Copyright (c) 2010-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use English;
use strict;
use Getopt::Std;
use XML::Simple;
use Data::Dumper;
use URI::Escape;

#
# Import an image from an external source. 
#
sub usage()
{
    print("Usage: import_image [-d] [-v] [-u <user>] [-g] [-p pid] <url>\n");
    print("       import_image [-d] [-u <user>] [-g] -i <imageid>\n");
    print("Options:\n");
    print(" -d      - Turn on debugging\n");
    print(" -v      - Verify XML description only\n");
    print(" -g      - Download image after creating descriptor\n");
    print(" -u uid  - Create image as user instead of caller\n");
    print(" -p pid  - Create image in the specified project.\n".
	  "           Defaults to emulab-ops.\n");
    print(" -i id   - Update existing imported image.\n");
    exit(-1);
}
my $optlist = "dvu:p:giI";
my $debug   = 0;
my $verify  = 0;
my $getimage= 0;
my $update  = 0;
my $force   = 0;
my $user;
my $group;

#
# Configure variables
#
my $TB		= "@prefix@";
my $TBOPS       = "@TBOPSEMAIL@";
my $TBAUDIT	= "@TBAUDITEMAIL@";
my $TBGROUP_DIR	= "@GROUPSROOT_DIR@";
my $TBPROJ_DIR	= "@PROJROOT_DIR@";
my $TBBASE	= "@TBBASE@";
my $CONTROL     = "@USERNODE@";
my $WGET	= "/usr/local/bin/wget";
my $NEWIMAGE_EZ = "$TB/bin/newimageid_ez";
my $IMAGEDUMP   = "$TB/bin/imagedump";
my $SHA1	= "/sbin/sha1";
my $SAVEUID	= $UID;
my $IMAGEVALIDATE = "$TB/sbin/imagevalidate";
my $DELETEIMAGE   = "$TB/sbin/delete_image";
my $WITHPROVENANCE= @IMAGEPROVENANCE@;
my $doprovenance  = 0;

#
# Untaint the path
#
$ENV{'PATH'} = "$TB/bin:$TB/sbin:/bin:/usr/bin:/usr/bin:/usr/sbin";
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

#
# Turn off line buffering on output
#
$| = 1;

#
# We don't want to run this script unless its the real version.
#
if ($EUID != 0) {
    die("*** $0:\n".
	"    Must be setuid! Maybe its a development version?\n");
}

#
# Load the Testbed support stuff.
#
use lib "@prefix@/lib";
use libdb;
use EmulabConstants;
use EmulabFeatures;
use libtestbed;
use User;
use Project;
use Group;
use Image;
use OSinfo;

# Locals;
my $url;

# Protos
sub fatal($);
sub FetchMetadata($);
sub CreateImage($$$$);
sub DownLoadImage($$$$);

#
# There is no reason to run as root unless we need to ssh over
# to ops to fetch the URL.
#
$EUID = $UID;

#
# Parse command arguments. Once we return from getopts, all that should be
# left are the required arguments.
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"d"})) {
    $debug = 1;
}
if (defined($options{"v"})) {
    $verify = 1;
}
if (defined($options{"g"})) {
    $getimage = 1;
}
if (defined($options{"i"})) {
    $update = 1;
}
if (defined($options{"I"})) {
    $update = 1;
    $force  = 1;
}
if (defined($options{"u"})) {
    $user = User->Lookup($options{"u"});
    fatal("User does not exist")
	if (!defined($user));
}
if (defined($options{"p"})) {
    $group = Group->Lookup($options{"p"});
    if (!defined($group)) {
	my $project = Project->Lookup($options{"p"});
	fatal("Project/Group does not exist")
	    if (!defined($project));
	$group = $project->GetProjectGroup();
	fatal("Error getting project group for $project")
	    if (!defined($group));
    }
}
else {
    $group = Group->Lookup(TBOPSPID(), TBOPSPID());
    fatal("Error getting project group for " . TBOPSPID())
	if (!defined($group));
}

if (!defined($user)) {
    $user = User->ThisUser();
    if (! defined($user)) {
	fatal("You ($UID) do not exist!");
    }
}
my $user_uid = $user->uid();

if ($update) {
    usage()
	if (!@ARGV);

    my $image = Image->Lookup($ARGV[0]);
    if (!defined($image)) {
	fatal("Image descriptor does not exist");
    }
    if (!defined($image->metadata_url())) {
	fatal("Not an imported image");
    }
    $url = $image->metadata_url();

    # If the user is not an admin, must have perm on the image.
    if (!$user->IsAdmin() &&
	!$image->AccessCheck($user, TB_IMAGEID_CREATE())) {
	fatal("$user does not have permission $image");
    }
}
else {
    usage()
	if (! (@ARGV && defined($group)));

    $url = $ARGV[0];
    # We know this is valid, but must taint check anyway for shell command.
    if ($url =~/^(.*)$/) {
	$url = $1;
    }

    # If the user is not an admin, must be a member or have perm in
    # the group.
    if (!$user->IsAdmin() &&
	!$group->AccessCheck($user, TB_PROJECT_MAKEIMAGEID())) {
	fatal("$user does not have permission in $group");
    }
}

my $xmlparse = FetchMetadata($url);

#
# Sanity checks; it must have a hash and a url inside. We let
# newimageid do the rest of the checks though.
#
if (! exists($xmlparse->{'attribute'}->{"hash"}) ||
    ! ($xmlparse->{'attribute'}->{"hash"}->{'value'} =~ /^\w{10,}$/)) {
    fatal("Invalid hash in metadata");
}
if (! exists($xmlparse->{'attribute'}->{"imagefile_url"})) {
    fatal("Invalid imagefile url in metadata");
}
my $newhash = $xmlparse->{'attribute'}->{"hash"}->{'value'};
# Silly taint check.
if ($newhash =~/^(.*)$/) {
    $newhash = $1;
}

#
# See if we already have an image in the DB for this URL.
# If not, we have to create it.
#
# Need to watch for two experiments causing this image to
# get created at the same time. It would be pretty silly,
# but users are users ... 
#
my $safe_url = DBQuoteSpecial($url);
my $query_result = DBQueryWarn("select GET_LOCK($safe_url, 120)");
if (!$query_result ||
    !$query_result->numrows) {
    fatal("Could not get the SQL lock for a long time!");
}
my $image = Image->LookupByURL($url);
if (!defined($image)) {
    $image = CreateImage($url, $xmlparse, $user, $group);
}
DBQueryWarn("select RELEASE_LOCK($safe_url)");
exit(0)
    if ($verify);

#
# If the image has not been downloaded or if the hash has changed,
# get a new copy.
#
if ($getimage) {
    #
    # We need to get the lock since someone else could already
    # be downloading it. Even worse, someone might be taking a local
    # snapshot, although at the moment we do not support that.
    #
    if ($image->Lock()) {
	print "$image is currently locked. Waiting ...\n";

	my $maxwait = 600;
	while ($maxwait > 0 && $image->WaitLock(60)) {
	    print "$image is currently locked. Waiting ...\n";
	    $maxwait -= 60;
	}
	if (!$image->GotLock()) {
	    fatal("Could not get the image lock after a long time");
	}
    }
    if (! -e $image->path() || $newhash ne $image->hash() || $force) {
	#
	# When updating an image ... 
	#
	if ($update && $WITHPROVENANCE) {
	    $doprovenance =
		EmulabFeatures->FeatureEnabled("ImageProvenance",
					       undef, $image->GetProject());
	    if ($doprovenance) {
		#
		# This will include unreleased images (in image_versions, but
		# not the one pointed to by the images table). 
		#
		$image = $image->LookupMostRecent();
		if (!defined($image)) {
		    $image->Unlock();
		    fatal("Cannot lookup most recent version of $image");
		}
		# Reuse is not ready/released.
		if ($image->ready() && $image->released()) {
		    my $clone = $image->NewVersion($user, undef, undef);
		    if (!defined($clone)) {
			$image->Unlock();
			fatal("Could not clone image descriptor $image");
		    }
		    $image = $clone;
		}
	    }
	}
	if (DownLoadImage($image, $newhash, $user, $group)) {
	    $image->Unlock();
	    exit(1);
	}
	# Update DB info. Use the hash we were given, no need to recalculate.
	my $imageid = $image->imageid();
	# Run as root to access /proj
	$EUID = $UID = 0;
	if (system("$IMAGEVALIDATE -uq -H '$newhash' $imageid")) {
	    # XXX should this be fatal?
	    print STDERR "Could not update DB info for $image\n";
	}
	$EUID = $UID = $SAVEUID;
	$image->MarkReady();
	$image->Release();
	# Its more important to know when we brought the new version in.
	if ($WITHPROVENANCE && $doprovenance && $update) {
	    $image->MarkUpdate($user);
	}
    }
    $image->Unlock();
}
exit(0);

#
# Create a new image descriptor. We have to munge the XML file a bit
# though and write it out.
#
sub CreateImage($$$$)
{
    my ($url, $xmlparse, $user, $group) = @_;
    my $alltypes = "-a";
    my $global   = 0;
    
    $xmlparse->{'attribute'}->{"pid"} = {};
    $xmlparse->{'attribute'}->{"gid"} = {};
    $xmlparse->{'attribute'}->{"pid"}->{'value'} = $group->pid();
    $xmlparse->{'attribute'}->{"gid"}->{'value'} = $group->gid();

    #
    # Look for a parent osid; this means we should set the type
    # to pcvm since the image is for a VM. Well, we also use this
    # for subnodes, but I am not going to worry about that case.
    #
    if (exists($xmlparse->{'attribute'}->{"def_parentosid"})) {
	$xmlparse->{'attribute'}->{"mtype_pcvm"} = {};
	$xmlparse->{'attribute'}->{"mtype_pcvm"}->{'value'} = 1;
	$alltypes = "";
    }

    # For setting the path below.
    if (exists($xmlparse->{'attribute'}->{"global"}) &&
	$xmlparse->{'attribute'}->{"global"}->{'value'}) {
	$global = 1;
    }

    #
    # We check to see if the imagename is already in use. Hopefully
    # not, but if not we have to make something up. Note that I am
    # not going to worry about concurrent attempts to create a descriptor
    # with the same name. 
    #
    if (! exists($xmlparse->{'attribute'}->{"imagename"})) {
	$xmlparse->{'attribute'}->{"imagename"}->{'value'} = 
	    substr(TBGenSecretKey(), 0, 12);
    }
    elsif (Image->Lookup($group->pid(),
			 $xmlparse->{'attribute'}->{"imagename"}->{'value'})) {
	my $index = 1;
	my $imagename;
	do {
	    $imagename = $xmlparse->{'attribute'}->{"imagename"}->{'value'};
	    $imagename .= "_" . $index++;
	} while ($index < 100 && Image->Lookup($group->pid(), $imagename));
	if ($index >= 100) {
	    fatal("Could not generate a unique image name");
	}
	$xmlparse->{'attribute'}->{"imagename"}->{'value'} = $imagename;
    }
    my $imagename = $xmlparse->{'attribute'}->{"imagename"}->{'value'};
    if ($debug) {
	print STDERR "Using imagename: $imagename\n";
    }
    # do not trust path coming in.
    if ($global && $user->IsAdmin()) {
	$xmlparse->{'attribute'}->{"path"}->{'value'} =
	    "$TB/images/${imagename}.ndz";
    }
    else {
	$xmlparse->{'attribute'}->{"path"}->{'value'} =
	    "$TBPROJ_DIR/" . $group->pid() . "/images/${imagename}.ndz";
    }
    
    #
    # Generate a new XML description to feed into newimageid.
    #
    $xmlparse->{'attribute'}->{"imagefile_url"}->{'value'} =
	uri_escape($xmlparse->{'attribute'}->{"imagefile_url"}->{'value'});
    $xmlparse->{'attribute'}->{"metadata_url"}->{'value'} = uri_escape($url);

    my $newxml = "";
    foreach my $key (keys(%{ $xmlparse->{'attribute'} })) {
	my $value = $xmlparse->{'attribute'}->{"$key"}->{'value'};
	$newxml .=
	    "<attribute name=\"$key\"><value>$value</value></attribute>\n";
    }
    $newxml = "<image>$newxml</image>";
    if ($debug) {
	print STDERR "$newxml\n";
    }
    # Verify first, Use skip admin checks option.
    open(NEW, "| $NEWIMAGE_EZ $alltypes -s -v -")
	or fatal("Cannot start $NEWIMAGE_EZ");
    print NEW $newxml;
    if (!close(NEW)) {
	print STDERR "$newxml\n";
	fatal("Image xml did not verify");
    }
    return undef
	if ($verify);
    
    open(NEW, "| $NEWIMAGE_EZ $alltypes -s -")
	or fatal("Cannot start $NEWIMAGE_EZ");
    print NEW $newxml;
    if (!close(NEW)) {
	print STDERR "$newxml\n";
	fatal("Could not create new image from xml");
    }

    my $image = Image->LookupByURL($url);
    if (!defined($image)) {
	fatal("Could not lookup new image for $url");
    }
    $image->MarkReady();
    $image->MarkReleased();
    return $image;
}

#
# Download the image file. 
#
sub DownLoadImage($$$$)
{
    my ($image, $newhash, $user, $group) = @_;
    my $image_url = uri_unescape($image->imagefile_url());
    my $safe_url  = User::escapeshellarg($image_url);
    my $localfile = $image->path() . ".new";

    #
    # Build up a new command line to do the fetch on ops
    # But no reason to do this if an admin, which is important
    # when the image is going into /usr/testbed/images.
    #
    if (!$user->IsAdmin()) {
	my $cmdargs = "$TB/bin/fetchtar.proxy -h -u $user_uid";
	my $glist = `/usr/bin/id -G $user_uid`;
	if ($glist =~ /^([\d ]*)$/) {
	    $glist = join(",", split(/\s+/, $1));
	}
	else {
	    print STDERR "Unexpected results from 'id -G $user': $glist\n";
	    return -1;
	}
	$cmdargs .= " -g '$glist' \"$safe_url\" $localfile";

	print "Downloading $image_url ...\n";
	if ($debug) {
	    print "$cmdargs\n";
	}
	$EUID = $UID = 0;
	system("sshtb -host $CONTROL $cmdargs ");
	if ($?) {
	    $EUID = $UID = $SAVEUID;
	    print STDERR "Fetch of image file failed\n";
	    return -1;
	}
	$UID = $SAVEUID;
    }
    else {
	print "Downloading $image_url ...\n";
	
	if (! open(GET, "| nice -15 $WGET --no-check-certificate ".
		   "--timeout=30 --waitretry=30 -q -O $localfile -i -")) {
	    print STDERR "Cannot start $WGET\n";
	    return -1;
	}
	print GET "$image_url\n";
	return -1
	    if (!close(GET));

	system("$SHA1 $localfile > ${localfile}.sha1");
	if ($?) {
	    print STDERR "Could not generate sha1 hash of $localfile\n";
	    return -1;
	}
    }

    #
    # Verify the hash.
    #
    my $newhashfile = $localfile . ".sha1";
    print "Verifying the hash ...\n";
    my $filehash = `cat $newhashfile`;
    if ($?) {
	print STDERR "Could not read sha1 hash file $newhashfile\n";
	return -1;
    }
    chomp($filehash);
    if ($filehash =~ /^SHA1.*= (\w*)$/) {
	$filehash = $1;
    }
    else {
	print STDERR "Could not parse the sha1 hash: '$filehash'\n";
	return -1;
    }
    if ($filehash ne $newhash) {
	print STDERR "sha1 hash of new file did not match\n";
	return -1;
    }

    #
    # Use imagedump to verify the ndz file.
    #
    print "Verifying ndz file format ...\n";
    system("$IMAGEDUMP $localfile");
    if ($?) {
	return -1;
    }
    return 0
	if ($verify);

    #
    # Now rename the image files and update the hash file.
    #
    my $hashfile = $image->path() . ".sha1";
    my $ndzfile  = $image->path();
    unlink($hashfile)
	if (-e $hashfile);
    system("/bin/mv -f $newhashfile $hashfile");
    if ($?) {
	return -1;
    }
    if (-e $ndzfile) {
	system("/bin/mv -f $ndzfile ${ndzfile}.old");
	if ($?) {
	    return -1;
	}
    }
    system("/bin/mv -f $localfile $ndzfile");
    if ($?) {
	return -1;
    }
    $EUID = $SAVEUID;
    return 0;
}

#
# Fetch the metadata from the provided URL. Return the XML parse,
#
sub FetchMetadata($)
{
    my ($url) = @_;
    my $safe_url = User::escapeshellarg($url);
    my $xml  = "";
    my $opts = ($debug ? "" : "-q");
    my $cmd  = "$WGET $opts --no-check-certificate -O - $safe_url ";

    if ($debug) {
	print "$cmd\n";
    }
    open(META, "$cmd |") or
	fatal("Could not fetch metadata from $url");
    while (<META>) {
	$xml .= $_;
    }
    close(META)
	or fatal("Could not read metadata from $url");

    if ($xml eq "") {
	fatal("Failed to get metadata from $url");
    }

    my $xmlparse = eval { XMLin($xml,
				VarAttr => 'name',
				ContentKey => '-content',
				SuppressEmpty => undef); };
    fatal($@)
	if ($@);

    if ($debug) {
	print STDERR Dumper($xmlparse);
    }

    #
    # We are going to let newimageid do the real checking.
    #
    return $xmlparse;
}

sub fatal($)
{
    my ($mesg) = @_;

    print STDERR "*** $0:\n".
	         "    $mesg\n";
    exit(-1);
}

