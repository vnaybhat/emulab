#!/usr/bin/perl -w
#
# Copyright (c) 2003-2014 University of Utah and the Flux Group.
# 
# {{{EMULAB-LICENSE
# 
# This file is part of the Emulab network testbed software.
# 
# This file is free software: you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at
# your option) any later version.
# 
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public
# License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this file.  If not, see <http://www.gnu.org/licenses/>.
# 
# }}}
#
use strict;
use English;
use Getopt::Std;
use Date::Parse;
use Time::Local;
use Data::Dumper;
use File::Temp qw(tempfile);

#
# Add a generic device to the DB. 
#
sub usage()
{
    print STDERR "Usage: addspecialiface -b <speed> [-s <switchinfo>] ".
	"<node_id> <iface_id>\n";
    print STDERR "Usage: addspecialiface -r <node_id> <iface_id>\n";
    print STDERR "Options:\n";
    print STDERR " -d       - Turn on debugging\n";
    print STDERR " -n       - Dry run mode\n";
    print STDERR " -t       - Do not call snmpit to set trunk mode\n";
    print STDERR " -r       - Delete interface\n";
    print STDERR " -f       - (with -r) force deletion, even if iface used\n";
    print STDERR " -b speed - Interface speed; 100Mb, 1Gb or 10Gb \n";
    print STDERR " -s info  - switchname,switchcard,switchport\n";
    print STDERR " iface_id - eth0, eth1, etc (must end in an integer)\n";
    exit(-1);
}
my $optlist   = "b:dfns:rt";
my $debug     = 0;
my $impotent  = 0;
my $removing  = 0;
my $force     = 0;
my $notrunk   = 0;
my $speed;
my $switchinfo;

# Protos
sub fatal($);

#
# Configure variables
#
my $TB          = "@prefix@";
my $SNMPIT      = "$TB/bin/snmpit_test";

#
# Testbed Support libraries
#
use lib "@prefix@/lib";
use emdb;
use EmulabConstants;
use emutil;
use User;
use Node;
use NodeType;
use OSinfo;
use Interface;

#
# Turn off line buffering on output
#
$| = 1;

#
# Untaint the path
# 
$ENV{'PATH'} = "/bin:/sbin:/usr/bin:";

#
# Parse command arguments. 
#
my %options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{'h'})) {
    usage();
}
if (defined($options{'d'})) {
    $debug = 1;
}
if (defined($options{'n'})) {
    $impotent = 1;
}
if (defined($options{'r'})) {
    $removing = 1;
}
if (defined($options{'f'})) {
    $force = 1;
}
if (defined($options{'t'})) {
    $notrunk = 1;
}
if (defined($options{'b'})) {
    $speed = $options{'b'};
    usage()
	if ($speed ne "1Gb" && $speed ne "100Mb" && $speed ne "10Gb");
}
if (defined($options{'s'})) {
    $switchinfo = $options{"s"};
}
usage()
    if (@ARGV != 2);

my $node_id  = $ARGV[0];
my $iface_id = $ARGV[1];

#
# Verify user, must be admin.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    fatal("You ($UID) do not exist!");
}
if (!$this_user->IsAdmin()) {
    fatal("You are not a testbed administrator!");
}
my $node = Node->Lookup($node_id);
if (!defined($node)) {
    fatal("Node does not exist in the DB")
}
my $interface = Interface->LookupByIface($node, $iface_id);
if ($removing) {
    fatal("Node does not have an interface named $iface_id")
	if (!defined($interface));
}
else {
    fatal("Node already has an interface named $iface_id")
	if (defined($interface));
}
if ($removing) {
    my $query_result =
	DBQueryWarn("select lma1.lanid from lan_member_attributes as lma1, " .
		    "lan_member_attributes as lma2 where " .
		    "lma1.lanid = lma2.lanid and lma1.memberid=lma2.memberid " .
		    "and lma1.attrkey='node_id' and " .
		    "lma1.attrvalue='$node_id' and " .
		    "lma2.attrkey='iface' and " .
		    "lma2.attrvalue='$iface_id'");
    if( $query_result && $query_result->numrows > 0 ) {
	if( $force ) {
	    print "$node_id:$iface_id appears to be in use; " .
		"continuing anyway...\n";
	} else {
	    print "warning: $node_id:$iface_id appears to be in use; " .
		"entering impotent mode (use -f to force removal)\n";
	    $impotent = 1;
	}
    }
    if( !$impotent ) {
	if ($node->IsReserved() &&
	    $node->erole() eq "sharedhost" && !$notrunk) {
	    print "Turning off trunk mode for $node_id:$iface_id\n";
	    system("$SNMPIT -U $node_id:$iface_id") == 0
		or fatal("Could not turn off port trunking mode");
	}

	$interface->DeleteWire() == 0
	    or fatal("Could not delete wire for $interface");

	# Flag indicates it is okay to delete real interface.
	$interface->Delete(1) == 0
	    or fatal("Could not delete $interface");
    }

    exit(0);
}

# Verify switch info
my $nodecard;
my $switchid;
my $switchcard;
my $switchport;

#
# Derive a card number form the iface number. 
#
if ($iface_id =~ /^[^\d]*(\d*)$/) {
    $nodecard = $1;
}
else {
    fatal("iface_id is not in the proper format");
}
if (Interface->Lookup($node, $nodecard)) {
    fatal("Node already has an interface with card=$nodecard");
}
if ($switchinfo =~ /^([-\w]+),(\d+),(\d+)$/) {
    $switchid   = $1;
    $switchcard = $2;
    $switchport = $3;
}
else {
    fatal("Invalid switch info");
}
my $switch = Node->Lookup($switchid);
if (!defined($switch)) {
    fatal("Switch $switchid does not exist");
}
if (Interface->Lookup($node, $switchcard, $switchport)) {
    fatal("Switch $switchid already has an interface with ".
	  "card=$switchcard,port=$switchport");
}
# But also need to look for any thing using this port;
my $wire = Interface::Wire->LookupAny($switchid, $switchcard, $switchport);
if (defined($wire)) {
    fatal("Switch $switchid already using this interface: $wire");
}

#
# Add the interface.
#
my $type;
my $max_speed;
if( $speed eq "100Mb" ) {
    $type = "generic";
    $max_speed = "100000";
} elsif( $speed eq "10Gb" ) {
    $type = "generic_10G";
    $max_speed = "10000000";
} else { # default is 1G for backward compatibility
    $type = "generic_1G";
    $max_speed = "1000000";
}
my $ifaceargs = {
    "card"        => $nodecard,
    "iface"       => $iface_id,
    "role"        => TBDB_IFACEROLE_EXPERIMENT(),
    "type"        => $type,
    "max_speed"   => $max_speed,
    "switch_id"   => $switchid,
    "switch_port" => $switchport,
    "switch_card" => $switchcard,
    "trunk"       => ($node->IsReserved() &&
		      $node->erole() eq "sharedhost" ? 1 : 0),
    "mac"         => "000000000000",
};
print "Creating interface with arguments:\n";
print Dumper($ifaceargs);
if (!$impotent) {
    Interface->Create($node, $ifaceargs)
	or fatal("Could not create interface entry");

    if ($node->IsReserved() &&
	$node->erole() eq "sharedhost" && !$notrunk) {
	print "Setting $node_id:$iface_id to trunking mode\n";
	system("$SNMPIT -E $node_id:$iface_id") == 0
	    or fatal("Could not put port into trunking mode");
    }
}
exit(0);

sub fatal($)
{
    my ($mesg) = $_[0];

    die("*** $0:\n".
	"    $mesg\n");
}


